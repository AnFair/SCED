do
  local DeckLib = {}
  local searchLib = require("util/SearchLib")

  -- places a card/deck at a position or merges into an existing deck below
  ---@param obj tts__Object Object to move
  ---@param pos table New position for the object
  ---@param rot? table New rotation for the object
  ---@param below? boolean Should the object be placed below an existing deck?
  DeckLib.placeOrMergeIntoDeck = function(obj, pos, rot, below)
    if obj == nil or obj.isDestroyed() or pos == nil then return end

    -- search the new position for existing card/deck
    local searchResult = searchLib.atPosition(pos, "isCardOrDeck")
    local targetObj

    -- get new position
    local offset = 0.5
    local newPos = Vector(pos) + Vector(0, offset, 0)

    if #searchResult == 1 then
      targetObj = searchResult[1]
      local bounds = targetObj.getBounds()
      if below then
        newPos = Vector(pos):setAt("y", bounds.center.y - bounds.size.y / 2)
      else
        newPos = Vector(pos):setAt("y", bounds.center.y + bounds.size.y / 2 + offset)
      end
    end

    -- allow moving the objects smoothly out of the hand and temporarily lock it
    obj.setLock(true)
    obj.use_hands = false

    if rot then
      obj.setRotationSmooth(rot, false, true)
    end
    obj.setPositionSmooth(newPos, false, true)

    -- use putObject if the card stops smooth moving to avoid a TTS bug that merges unrelated cards that are not resting
    -- pcall avoids errors (physics is sometimes too fast so the object doesn't exist for the put)
    Wait.condition(
      pcall(function()
        obj.setLock(false)
        obj.use_hands = true
        if #searchResult == 1 and targetObj ~= obj then
          targetObj.putObject(obj)
        end
      end),
      function() return not obj.isSmoothMoving() end, 3)
  end

  return DeckLib
end
