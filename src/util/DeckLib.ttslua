do
  local DeckLib = {}

  local coroutineLib = require("util/CoroutineLib")
  local searchLib    = require("util/SearchLib")

  -- places a card/deck at a position or merges into an existing deck
  ---@param objOrTable tts__Object|table Object or table of objects to move
  ---@param pos table New position for the object
  ---@param rot? table New rotation for the object
  ---@param below? boolean Should the object be placed below an existing deck?
  ---@param shuffle? boolean Should the resulting deck be shuffled?
  ---@return tts__Object|nil: The resulting object (if possible)
  function DeckLib.placeOrMergeIntoDeck(objOrTable, pos, rot, below, shuffle)
    if objOrTable == nil or pos == nil then return end

    -- handle 'objOrTable' parameter
    local objects = {}
    if type(objOrTable) == "table" then
      objects = objOrTable
    else
      table.insert(objects, objOrTable)
    end

    -- search the new position for existing card/deck
    local searchResult = searchLib.atPosition(pos, "isCardOrDeck")

    -- remove objects from search result that are queued
    for i = #searchResult, 1, -1 do
      for _, obj in ipairs(objects) do
        if searchResult[i] == obj then
          table.remove(searchResult, i)
        end
      end
    end

    local targetObj

    -- get new position
    local offset = 0.5
    local newPos = Vector(pos) + Vector(0, offset, 0)

    if #searchResult == 1 then
      targetObj = searchResult[1]
      local bounds = targetObj.getBounds()
      if below then
        newPos = Vector(pos):setAt("y", bounds.center.y - bounds.size.y / 2)
      else
        newPos = Vector(pos):setAt("y", bounds.center.y + bounds.size.y / 2 + offset)
      end
    end

    -- process objects in reverse order
    for i = #objects, 1, -1 do
      local obj = objects[i]
      -- add a 0.1 delay for each object (for animation purposes)
      Wait.time(function()
        -- allow moving smoothly out of hand and temporarily lock it
        obj.setLock(true)
        obj.use_hands = false

        if rot then
          obj.setRotation(rot)
        end
        obj.setPositionSmooth(newPos, false, true)

        -- wait for object to finish movement (or 2 seconds)
        Wait.condition(
          function()
            -- revert toggles
            obj.setLock(false)
            obj.use_hands = true

            -- use putObject to avoid a TTS bug that merges unrelated cards that are not resting
            if #searchResult == 1 and targetObj ~= obj and not targetObj.isDestroyed() and not obj.isDestroyed() then
              targetObj = targetObj.putObject(obj)
            else
              targetObj = obj
            end

            -- this is the final object, maybe shuffle (delay to look less uncanny)
            if i == 1 and targetObj.type == "Deck" and shuffle then
              Wait.frames(function() targetObj.shuffle() end, 3)
            end

            -- return the resulting object
            if i == 1 then return targetObj end
          end,
          -- check state of the object (make sure it's not moving)
          function() return obj.isDestroyed() or not obj.isSmoothMoving() end,
          2)
      end, (#objects - i) * 0.1)
    end
  end

  -- shuffles a card into a deck (or a part of it)
  ---@param objOrTable tts__Object|table Object or table of objects to shuffle into the deck
  ---@param deck tts__Object The target deck (or card)
  function DeckLib.shuffleIntoDeck(objOrTable, deck)
    if objOrTable == nil or deck == nil then return end

    -- handle 'objOrTable' parameter
    local objects = {}
    if type(objOrTable) == "table" then
      objects = objOrTable
    else
      table.insert(objects, objOrTable)
    end

    function DeckLibShuffleIntoDeckCoroutine()
      for _, obj in ipairs(objects) do
        deck = deck.putObject(obj)

        -- delay to make sure the deck can form and it looks neater
        coroutineLib.waitSeconds(0.35)
      end

      -- delay to make sure the user doesn't think the deck was shuffled too early
      coroutineLib.waitSeconds(0.7)

      deck.shuffle()
      return 1
    end

    startLuaCoroutine(self, "DeckLibShuffleIntoDeckCoroutine")
  end

  return DeckLib
end
