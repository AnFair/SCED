--[======================================================================================[
--
--  Lua 5.2+ UTF-8 support library (TTS-Safe Version)
--
--  This version has been modified to ensure compatibility with Tabletop Simulator
--
--  Based on the work of (c) 2014-2017 Andr√© Arko
--
--]======================================================================================]

do
  local utf8 = {}
  local charpattern = "([%z\1-\127\194-\244][\128-\191]*)"

  function utf8.offset(s, n)
    if n <= 1 then return n end
    local bytePos = 1
    for _ = 1, n - 1 do
      local _, nextBytePos = string.find(s, charpattern, bytePos)
      if not nextBytePos then return nil end
      bytePos = nextBytePos + 1
    end
    return bytePos
  end

  function utf8.len(s)
    if not s or s == "" then return 0 end
    return select(2, string.gsub(s, charpattern, ""))
  end

  function utf8.sub(s, i, j)
    j = j or -1
    local n = utf8.len(s)

    if i < 0 then i = n + i + 1 end
    if j < 0 then j = n + j + 1 end
    if i < 1 then i = 1 end
    if j > n then j = n end
    if i > j then return "" end

    local byteStartOffset = utf8.offset(s, i)
    local byteEndOffset = utf8.offset(s, j + 1)

    if byteStartOffset then
      if byteEndOffset then
        return string.sub(s, byteStartOffset, byteEndOffset - 1)
      else
        return string.sub(s, byteStartOffset)
      end
    end
    return ""
  end

  function utf8.match(s, p)
    local pattern_chars = string.match(p, "^%[(.+)%]$")
    if pattern_chars then
      if string.find(":<>!\"", s, 1, true) then
        return s
      end
      if string.find(pattern_chars, "%%s") and string.match(s, "%s") then
        return s
      end
    end
    return nil
  end

  -- Pass-through functions from the standard `string` library
  utf8.byte    = string.byte
  utf8.char    = string.char
  utf8.find    = string.find
  utf8.gmatch  = string.gmatch
  utf8.reverse = string.reverse

  return utf8
end
