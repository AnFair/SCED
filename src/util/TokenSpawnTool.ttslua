local guidReferenceApi = require("core/GUIDReferenceApi")
local playermatApi = require("playermat/PlayermatApi")
local searchLib = require("util/SearchLib")
local tokenManager = require("core/token/TokenManager")
local TOKEN_INDEX = {}

TOKEN_INDEX[1] = "universalActionAbility"
TOKEN_INDEX[3] = "resourceCounter"
TOKEN_INDEX[4] = "damage"
TOKEN_INDEX[5] = "path"
TOKEN_INDEX[6] = "horror"
TOKEN_INDEX[7] = "doom"
TOKEN_INDEX[8] = "clue"
TOKEN_INDEX[9] = "resource"

---@param index number Index of the pressed key
---@param playerColor string Color of the triggering player
function onScriptingButtonDown(index, playerColor)
  local tokenType = TOKEN_INDEX[index]
  if not tokenType then return end

  local rotation = { x = 0, y = Player[playerColor].getPointerRotation(), z = 0 }
  local position = Player[playerColor].getPointerPosition() + Vector(0, 0.2, 0)

  -- check for subtype of resource based on card below
  if tokenType == "resource" then
    local card
    local hoverObj = Player[playerColor].getHoverObject()
    if hoverObj and hoverObj.type == "Card" then
      card = hoverObj
    elseif hoverObj then
      -- use the first card below the hovered object if it's not a card1
      for _, obj in ipairs(searchLib.belowPosition(position, "isCard")) do
        card = obj
        break
      end
    end

    -- get the metadata from the card and maybe replenish a use
    if card and not card.is_face_down then
      local metadata = JSON.decode(card.getGMNotes()) or {}
      local uses = metadata.uses or {}
      for _, useInfo in ipairs(uses) do
        if useInfo.token == "resource" then
          -- artifically create replenish data to re-use that existing functionality
          uses[1].count = 999
          uses[1].replenish = 1
          local matColor = playermatApi.getMatColorByPosition(position)
          local mat = guidReferenceApi.getObjectByOwnerAndType(matColor, "Playermat")
          tokenManager.maybeReplenishCard(card, uses, mat)
          return
        end
      end
    end
  -- check hovered object for "resourceCounter" tokens and increase them instead
  elseif tokenType == "resourceCounter" then
    local hoverObj = Player[playerColor].getHoverObject()
    if hoverObj then
      if tokenType == hoverObj.getMemo() then
        hoverObj.call("addOrSubtract")
        return
      end
    end
  -- check hovered object for "damage" and "horror" tokens and increase them instead
  elseif tokenType == "damage" or tokenType == "horror" then
    local hoverObj = Player[playerColor].getHoverObject()
    if hoverObj then
      if tokenType == hoverObj.getMemo() then
        local stateInfo = hoverObj.getStates()
        local stateId = hoverObj.getStateId()
        if stateId <= #stateInfo then
          hoverObj.setState(stateId + 1)
          return
        end
      end
    end
  -- check for nearest investigator card and change action token state to its class 
  elseif tokenType == "universalActionAbility" then
    local matColor = playermatApi.getMatColorByPosition(position)
    local class = playermatApi.returnInvestigatorClass(matColor)
    callback = function(spawned) spawned.call("updateClassAndSymbol", { class = class, symbol = class }) end
  end

  tokenManager.spawnToken(position, tokenType, rotation, callback)
end
