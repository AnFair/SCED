do
  local ColorLib = {}

  -- Converts a hex color string to a TTS Color table
  ---@param hex string The hex color string (e.g., "#RRGGBB" or "#RRGGBBAA")
  ---@return tts__Color: A Color table {r, g, b, a} with values from 0-1, or nil if invalid
  function ColorLib.hexToColor(hex)
    -- Return nil if input is not a string
    if type(hex) ~= "string" then return nil end

    -- Remove '#' from the beginning of the string
    local hexStr = hex:gsub("#", "")

    -- Default to full alpha (FF) if not provided (i.e., a 6-digit hex)
    if #hexStr == 6 then
      hexStr = hexStr .. "FF"
    end

    -- If the string isn't 8 characters now, it's invalid
    if #hexStr ~= 8 then return nil end

    -- Convert hex pairs to decimal (0-255) and normalize to 0-1
    local r = tonumber(hexStr:sub(1, 2), 16) / 255
    local g = tonumber(hexStr:sub(3, 4), 16) / 255
    local b = tonumber(hexStr:sub(5, 6), 16) / 255
    local a = tonumber(hexStr:sub(7, 8), 16) / 255

    return Color({ r = r, g = g, b = b, a = a })
  end

  -- Converts a hex color string to a TTS Color table
  ---@param col tts__Color A Color table {r, g, b, a} with values from 0-1
  ---@return string: The hex color string (e.g., "#RRGGBB" or "#RRGGBBAA")
  function ColorLib.colorToHex(col)
    return "#" .. col:toHex()
  end

  -- Multiplies a color by a value (excluding the alpha value)
  ---@param col tts__Color A Color table {r, g, b, a} with values from 0-1
  ---@param mult number Multiplier for the color values
  function ColorLib.multiply(col, mult)
    return Color(col.r * mult, col.g * mult, col.b * mult, col.a)
  end

  -- Generates a color block for xml (e.g. a button)
  ---@param baseColor tts__Color A Color table {r, g, b, a} with values from 0-1
  ---@param darkMult number Multiplier for the dark color variation
  ---@param lightMult number Multiplier for the light color variation
  function ColorLib.getXmlColorBlock(baseColor, darkMult, lightMult)
    local darkColor  = ColorLib.multiply(baseColor, darkMult)
    local lightColor = ColorLib.multiply(baseColor, lightMult)
    return ColorLib.colorToHex(baseColor) .. "|" .. ColorLib.colorToHex(darkColor) .. "|" .. ColorLib.colorToHex(lightColor)
  end

  return ColorLib
end
