local chaosBagApi      = require("chaosbag/ChaosBagApi")
local guidReferenceApi = require("core/GUIDReferenceApi")
local playmatApi       = require("playermat/PlaymatApi")

function onSave()
  return JSON.encode({ loopId = loopId })
end

function onLoad(savedData)
  self.addContextMenuItem("Enable Helper", createButtons)
  if savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    if loadedData.loopId then
      createButtons()
    end
  end
end

function deleteButtons()
  self.UI.setAttribute("inactives", "active", false)
  self.UI.setAttribute("actives", "active", false)
  self.clearContextMenu()
  self.addContextMenuItem("Enable Helper", createButtons)
  Wait.stop(loopId)
  loopId = nil
end

-- Create buttons and begin monitoring chaos bag for curse and bless tokens
function createButtons()
  self.clearContextMenu()
  self.addContextMenuItem("Clear Helper", deleteButtons)
  self.UI.setAttribute("inactives", "active", true)
  self.UI.setAttribute("actives", "active", true)
  self.UI.show("inactiveBless")
  self.UI.show("inactiveCurse")
  self.UI.hide("Bless")
  self.UI.hide("Curse")
  currentState = "Empty"
  loopId = Wait.time(countBlessCurse, 1, -1)
end

function resolveToken(_, _, tokenType)
  local closestMatColor = playmatApi.getMatColorByPosition(self.getPosition())
  local mat = guidReferenceApi.getObjectByOwnerAndType(closestMatColor, "Playermat")
  chaosBagApi.drawChaosToken(mat, true, tokenType)
end

-- count tokens in the bag and show appropriate buttons
function countBlessCurse()
  local numInBag = { Bless = 0, Curse = 0 }
  local chaosBag = chaosBagApi.findChaosBag()
  local tokens = {}
  for _, v in ipairs(chaosBag.getObjects()) do
    if v.name == "Bless" then
      numInBag.Bless = numInBag.Bless + 1
    elseif v.name == "Curse" then
      numInBag.Curse = numInBag.Curse + 1
    end
  end
  
  if numInBag.Bless > numInBag.Curse then
    if currentState ~= "More Bless" then
      self.UI.show("Bless")
      self.UI.hide("inactiveBless")
      self.UI.show("inactiveCurse")
      self.UI.hide("Curse")
    end
    currentState = "More Bless"
  elseif numInBag.Curse > numInBag.Bless then
    if currentState ~= "More Curse" then
      self.UI.show("Curse")
      self.UI.hide("inactiveCurse")
      self.UI.show("inactiveBless")
      self.UI.hide("Bless")
    end
    currentState = "More Curse"
  elseif numInBag.Curse == 0 then
    if currentState ~= "Empty" then
      self.UI.show("inactiveBless")
      self.UI.hide("Bless")
      self.UI.show("inactiveCurse")
      self.UI.hide("Curse")
    end
    currentState = "Empty"
  else
    if currentState ~= "Equal" then
      self.UI.show("Bless")
      self.UI.hide("inactiveBless")
      self.UI.show("Curse")
      self.UI.hide("inactiveCurse")
    end
    currentState = "Equal"
  end
end

function errorMessage ()
  if currentState == "Empty" then
    broadcastToAll("There are no Bless or Curse tokens in the chaos bag.","Red")
  elseif currentState == "More Bless" then
    broadcastToAll("There are more Bless tokens than Curse tokens in the chaos bag.","Red")
  else
    broadcastToAll("There are more Curse tokens than Bless tokens in the chaos bag.","Red")
  end
end
