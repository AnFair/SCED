require("playercards/CardsWithHelper")
local TableLib        = require("util/TableLib")

-- intentionally global
hasXML                = true
isHelperEnabled       = false

local SKILL_LIST      = {
  willpower = { text = "f", textColor = "#0B3F6C" },
  intellect = { text = "g", textColor = "#56244A" },
  combat    = { text = "h", textColor = "#6B2615" },
  agility   = { text = "i", textColor = "#03553B" }
}
local BUTTON_COLOR    = {
  active   = "#F5F5F5D0",
  inactive = "#4D4D4DA0",
  disabled = "#FFFFFF00"
}
local TEXT_COLOR      = {
  inactive = "#D3D3D3A0",
  disabled = "#FFFFFF00"
}
local hoveringPlayers = {}
local selectedSkill

function onDestroy()
  selectedSkill = nil
  updateSave()
end

function updateSave()
  self.script_state = JSON.encode({
    isHelperEnabled = isHelperEnabled,
    selectedSkill   = selectedSkill
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled  = loadedData.isHelperEnabled
    selectedSkill    = loadedData.selectedSkill
  end

  generateXml()

  if isHelperEnabled then updateDisplay() end
end

function shutOff()
  maybeUpdateButtonState()
end

function initialize()
  maybeUpdateButtonState()
end

function generateXml()
  local gridXml = {
    tag        = "GridLayout",
    children   = {},
    attributes = {
      id              = "Helper",
      active          = isHelperEnabled,
      rotation        = "0 0 180",
      scale           = "0.175 0.175 1",
      childAlignment  = "MiddleCenter",
      constraint      = "FixedColumnCount",
      constraintCount = 2,
      position        = "0 -60 -40",
      width           = 350 * 2 + 55,
      height          = 350 * 2 + 55,
      cellSize        = "350 350",
      spacing         = "55 55"
    }
  }

  local buttonXml = {
    tag = "Button",
    attributes = {
      onClick  = "skillClick",
      font     = "font_arkhamicons",
      fontSize = 315
    }
  }

  for skill, data in pairs(SKILL_LIST) do
    local skillXml           = TableLib.copy(buttonXml)
    skillXml.attributes.id   = skill
    skillXml.attributes.text = data.text
    table.insert(gridXml.children, skillXml)
  end

  self.UI.setXmlTable({ gridXml })
end

function skillClick(_, _, elementId)
  if selectedSkill == elementId then
    selectedSkill = nil
  else
    selectedSkill = elementId
  end
  updateSave()
  maybeUpdateButtonState()
end

function isSomeoneHovering()
  for _, state in pairs(hoveringPlayers) do
    if state then return true end
  end
  return false
end

function maybeUpdateButtonState()
  local someoneHovers = isSomeoneHovering()

  for skill, data in pairs(SKILL_LIST) do
    local attributes = { color = BUTTON_COLOR.inactive, textColor = TEXT_COLOR.inactive }

    if skill == selectedSkill then
      attributes.color     = BUTTON_COLOR.active
      attributes.textColor = data.textColor
    elseif not someoneHovers then
      attributes.color     = BUTTON_COLOR.disabled
      attributes.textColor = TEXT_COLOR.disabled
    end

    self.UI.setAttributes(skill, attributes)
  end
end

function onObjectHover(playerColor, object)
  hoveringPlayers[playerColor] = object == self
  if waitId then
    Wait.stop(waitId)
  end
  waitId = Wait.time(maybeUpdateButtonState, (object == self) and 0.001 or 0.2)
end
