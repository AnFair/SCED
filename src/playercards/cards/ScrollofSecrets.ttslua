-- this script is shared between the lvl 0 and lvl 3 versions of Scroll of Secrets
local mythosAreaApi = require("core/MythosAreaApi")
local playmatApi    = require("playermat/PlaymatApi")

-- get class via metadata and create context menu accordingly
function onLoad()
  local notes = JSON.decode(self.getGMNotes())
  if notes then
    createContextMenu(notes.class)
  else
    print("Missing metadata for Scroll of Secrets!")
  end
end

function createContextMenu(class)
  local colorList = Player.getAvailableColors()

  if class == "Seeker|Mystic" then
    -- draw 1 card from the bottom
    self.addContextMenuItem("Draw bottom card", function(playerColor) contextFunc(playerColor, 1) end)
  elseif class == "Seeker" then
    -- draw 3 cards from the bottom
    self.addContextMenuItem("Draw bottom card(s)", function(playerColor) contextFunc(playerColor, 3) end)
  elseif class == "Mystic" then
    -- draw 1 card from the bottom
    self.addContextMenuItem("Draw bottom card", function(playerColor) contextFunc(playerColor, 1) end)
  end
end

function contextFunc(playerColor, amount)
  -- TODO: only show colors that have a deck
  local options = Player.getAvailableColors()
  table.insert(options, "Encounter Deck")

  -- show the target selection dialog
  Player[playerColor].showOptionsDialog("Select target deck", options, _, 
    function(owner)
      drawCardsFromBottom(playerColor, owner, amount)
    end
  )
end

function drawCardsFromBottom(playerColor, owner, amount)
  -- variable initialization
  local deck = nil
  local deckSize = 1
  local deckAreaObjects = {}

  -- get the respective deck
  if owner == "Encounter Deck" then
    deck = mythosAreaApi.getEncounterDeck()
  else
    local matColor = playmatApi.getMatColor(owner)
    deckAreaObjects = playmatApi.getDeckAreaObjects(matColor)
    deck = deckAreaObjects.draw
  end

  -- error handling
  if not deck then
    printToColor("Couldn't find deck!", playerColor)
    return
  end

  -- set deck size if there is actually a deck and not just a card
  if deck.type == "Deck" then
    deckSize = #deck.getObjects()
  end

  -- proceed according to deck size
  if deckSize > amount then
    for i = 1, amount do
      local card = deck.takeObject({ top = false, flip = true })
      card.deal(1, playerColor)
    end
  else
    -- deal the whole deck
    deck.deal(amount, playerColor)

    if deckSize < amount then
      -- Norman Withers handling
      if deckAreaObjects.topCard then
        deckAreaObjects.topCard.deal(1, playerColor)
        deckSize = deckSize + 1
      end

      -- warning message for player
      if deckSize < amount then
        printToColor("Deck didn't contain enough cards.", playerColor)
      end
    end
  end
end
