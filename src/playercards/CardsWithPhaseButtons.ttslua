require("playercards/CardsWithHelper")
local SideButtonCreator = require("util/SideButtonCreator")

-- intentionally global
hasXML                  = true
isHelperEnabled         = false

local buttonParams      = {
  buttonLabels = { "u", "u", "u", "u" }, -- reaction symbols
  buttonIds    = { "Mythos", "Investigation", "Enemy", "Upkeep" },
  buttonColors = {
    "#CC3333E6", -- Bold and slightly warm red
    "#88C999E6", -- Soft green
    "#4477A1E6", -- Darker blue
    "#E6D34CE6"  -- Golden yellow
  }
}

local buttonIdToIndex   = {
  Mythos        = 1,
  Investigation = 2,
  Enemy         = 3,
  Upkeep        = 4
}

---------------------------------------------------------
-- general setup
---------------------------------------------------------

function updateSave()
  self.script_state = JSON.encode({ isHelperEnabled = isHelperEnabled })
end

function onLoad(savedData)
  self.addTag("CardWithHelper")
  self.addTag("DoInUpkeep")

  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled = loadedData.isHelperEnabled
  end

  createHelperXML()

  if isHelperEnabled then
    updateDisplay()
  end
end

function createHelperXML()
  local xmlTable = SideButtonCreator.getXmlTable(buttonParams)
  self.UI.setXmlTable(xmlTable)
end

---------------------------------------------------------
-- main functionality
---------------------------------------------------------

-- sets the state for all buttons
function setUiState(params)
  for buttonId, state in pairs(params) do
    setStateForButton(state, buttonId)
  end
end

-- sets the state for a specific button
function setStateForButton(state, buttonId)
  -- if state is omitted, get it from the XML and toggle it
  if not state then
    state = (self.UI.getAttribute(buttonId, "buttonState") == "off")
  end

  local color = buttonParams.buttonColors[buttonIdToIndex[buttonId]]
  self.UI.setAttribute(buttonId, "color", state and color or "#353535E6")
  self.UI.setAttribute(buttonId, "textColor", state and "white" or "#A0A0A0")
  self.UI.setAttribute(buttonId, "buttonState", state and "on" or "off")
end

-- toggles the state for the clicked button
function onClick_sideButton(_, _, buttonId)
  setStateForButton(nil, buttonId)
end

-- called by the Upkeep function - sets all buttons to enabled
function doInUpkeep()
  for _, buttonId in ipairs(buttonParams.buttonIds) do
    setStateForButton(true, buttonId)
  end
end
