--[[ Library for cards that have helpers
This file is used to share code between cards with helpers.
It syncs the visibility of the helper with the option panel and
makes sure the card has the respective tag.
Additionally, it will call 'initiliaze()' and 'shutOff()'
in the parent file if they are present.

Instructions:
1) Define the global variables before requiring this file:
hasXML          = true  (whether the card has an XML display)
isHelperEnabled = false (default state of the helper, should be 'false')

2) In 'onLoad()'', call 'syncDisplayWithOptionPanel()'
----------------------------------------------------------]]

local GlobalApi = require("core/GlobalApi")

-- if the respective option is enabled in onLoad(), enable the helper
function syncDisplayWithOptionPanel()
  self.addTag("CardWithHelper")

  -- check if this card is in a hand zone (because we're loading a saved game)
  for _, zone in ipairs(self.getZones()) do
    if zone.type == "Hand" then
      setHelperState(false)
      return
    end
  end

  -- get state of the option panel
  local options = GlobalApi.getOptionPanelState()
  if options.enableCardHelpers then
    setHelperState(true)
  else
    updateDisplay()
  end
end

-- forces a new state
function setHelperState(newState)
  isHelperEnabled = newState
  updateSave()
  updateDisplay()
end

-- toggles the current state
function toggleHelper()
  isHelperEnabled = not isHelperEnabled
  updateSave()
  updateDisplay()
end

-- updates the visibility and calls events (after a small delay to allow XML being set)
function updateDisplay()
  Wait.frames(actualDisplayUpdate, 5)
end

function actualDisplayUpdate()
  if isHelperEnabled then
    self.clearContextMenu()
    self.addContextMenuItem("Disable Helper", toggleHelper)
    if hasXML then self.UI.show("Helper") end
    if initialize then initialize() end
  else
    self.clearContextMenu()
    self.addContextMenuItem("Enable Helper", toggleHelper)
    if hasXML then self.UI.hide("Helper") end
    if shutOff then shutOff() end
  end
end
