local playermatApi     = require("playermat/PlayermatApi")
local searchLib        = require("util/SearchLib")

-- forward declaration of variables that are used across functions
local matColor, handColor, hovering

function onLoad()
  local buttonParameters          = {}
  buttonParameters.function_owner = self

  local handSizeButtonParameters          = {}
  handSizeButtonParameters.function_owner = self

  -- index 0: button as hand size label
  buttonParameters.hover_color    = "White"
  buttonParameters.label          = 0
  buttonParameters.click_function = "none"
  buttonParameters.position       = Vector(0, 0.11, 0)
  buttonParameters.height         = 0
  buttonParameters.width          = 0
  buttonParameters.font_size      = 1000
  buttonParameters.font_color     = "White"
  self.createButton(buttonParameters)

  -- index 1: button as max handsize label
  handSizeButtonParameters.hover_color    = "White"
  handSizeButtonParameters.label          = 8
  handSizeButtonParameters.click_function = "none"
  handSizeButtonParameters.position       = {.7, .11, -.7}
  handSizeButtonParameters.height         = 0
  handSizeButtonParameters.width          = 0
  handSizeButtonParameters.font_size      = 300
  handSizeButtonParameters.font_color     = "Green"
  self.createButton(handSizeButtonParameters)

  -- make sure this part executes after the playermats are loaded
  Wait.time(function()
    updateColors()

    -- start loop to update card count
    Wait.time(updateValue, 1, -1)
  end, 1)
end

-- updates colors when object is dropped somewhere
function onDrop() updateColors() end

-- updates the matcolor and handcolor variable
function updateColors()
  matColor = playermatApi.getMatColorByPosition(self.getPosition())
  handColor = playermatApi.getPlayerColor(matColor)
  self.setName(handColor .. " Hand Helper")
end

function getHandSizeModifier()
  local modSize = 0
  local deckAreaObjects = playermatApi.getDeckAreaObjects(matColor)

  -- look for  cards around playermat that modify hand size
  for _, obj in ipairs(playermatApi.searchAroundPlayermat(matColor, "isCard")) do
    if not obj.is_face_down and
      obj ~= deckAreaObjects.draw and
      obj ~= deckAreaObjects.topCard and
      obj ~= deckAreaObjects.discard then

      -- handle specific cards
      local md = JSON.decode(obj.getGMNotes()) or {}
      if md.id == "60205" then -- Arcane Enlightenment
        modSize = modSize + 1
      elseif md.id == "02020" then -- Laboratory Assistant
        modSize = modSize + 2
      elseif md.id == "60202" then -- Vault of Knowledge
        modSize = modSize + 2
      elseif md.id == "03041" then -- Drawing the Sign
        modSize = modSize - 5
      elseif md.id == "71023" then -- Dr. Mya Badry
        modSize = modSize + 2
      end
    end
  end
  return modSize
end

function getInvestigatorHandSize()
  local activeInvestigatorData = playermatApi.getActiveInvestigatorData(matColor)
  if activeInvestigatorData == nil then return 8 end
  -- Patrice Hathaway has a base handsize of 5
  if activeInvestigatorData.id == "06005" then
    return 5
  elseif activeInvestigatorData.id == "11017" then
    -- if George Barnaby, look for attachment helper nearby set to his state
    for _, obj in ipairs(playermatApi.searchAroundPlayermat(matColor)) do
      if obj.getName() == "Attachment Helper" then
        if obj.call("getLastSyncedName") == "George Barnaby" then
          log(obj.getQuantity())
          return obj.getQuantity()
        end
      end
    end
  end
  return 8
end

-- count cards in hand
function updateValue()
  -- update colors if handColor doesn't own a handzone
  if Player[handColor].getHandCount() == 0 then
    updateColors()
  end

  -- if one of the colors is undefined, then end here
  if matColor == nil or handColor == nil then return end

  -- if there is still no handzone, then end here
  if Player[handColor].getHandCount() == 0 then return end

  -- count cards in hand
  local hand = Player[handColor].getHandObjects()
  local size = 0
  local maxSize = getInvestigatorHandSize()

  for _, obj in pairs(hand) do
    if obj.type == "Card" then
      size = size + 1
      local md = JSON.decode(obj.getGMNotes()) or {}
      if md.id == "10109" then -- Pelt Shipment
        maxSize = maxSize - 3
      end
    end
  end
  maxSize = maxSize + getHandSizeModifier()
  local handSizeColor = "Blue"

  if size > maxSize then
    handSizeColor = "Red"
  elseif size >= maxSize - 1 then
    handSizeColor = "Yellow"
  else
    handSizeColor = "Green"
  end

  if maxSize > 9 or size > 9 then
    self.editButton({ index = 1, font_size = 200})
  else
    self.editButton({ index = 1, font_size = 300})
  end

  -- update button label and color
  self.editButton({ index = 0, font_color = "White", label = size })
  self.editButton({ index = 1, font_color = handSizeColor, label = math.max(maxSize, 0)})
end
