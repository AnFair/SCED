local playermatApi = require("playermat/PlayermatApi")

-- forward declaration of variables that are used across functions
local matColor, handColor, hovering

function onLoad()
  local buttonParameters          = {}
  buttonParameters.function_owner = self

  -- index 0: button as hand size label
  buttonParameters.hover_color    = "White"
  buttonParameters.label          = 0
  buttonParameters.click_function = "none"
  buttonParameters.position       = Vector(0, 0.11, 0)
  buttonParameters.height         = 0
  buttonParameters.width          = 0
  buttonParameters.font_size      = 1000
  buttonParameters.font_color     = "White"
  self.createButton(buttonParameters)

  -- make sure this part executes after the playermats are loaded
  Wait.time(function()
    updateColors()

    -- start loop to update card count
    Wait.time(updateValue, 1, -1)
  end, 1)
end

-- updates colors when object is dropped somewhere
function onDrop() updateColors() end

-- updates the matcolor and handcolor variable
function updateColors()
  matColor = playermatApi.getMatColorByPosition(self.getPosition())
  handColor = playermatApi.getPlayerColor(matColor)
  self.setName(handColor .. " Hand Helper")
end

-- count cards in hand
function updateValue()
  -- update colors if handColor doesn't own a handzone
  if Player[handColor].getHandCount() == 0 then
    updateColors()
  end

  -- if one of the colors is undefined, then end here
  if matColor == nil or handColor == nil then return end

  -- if there is still no handzone, then end here
  if Player[handColor].getHandCount() == 0 then return end

  -- count cards in hand
  local hand = Player[handColor].getHandObjects()
  local size = 0

  for _, obj in pairs(hand) do
    if obj.type == "Card" then
      size = size + 1
    end
  end

  -- update button label and color
  self.editButton({ index = 0, font_color = "White", label = size })
end
