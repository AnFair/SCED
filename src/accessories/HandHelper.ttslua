local playermatApi = require("playermat/PlayermatApi")

-- forward declaration of variables that are used across functions
local matColor, handColor, hovering

function onLoad()
  local buttonParamaters          = {}
  buttonParamaters.function_owner = self

  -- index 0: button as hand size label
  buttonParamaters.hover_color    = "White"
  buttonParamaters.label          = 0
  buttonParamaters.click_function = "none"
  buttonParamaters.position       = Vector(0, 0.11, -0.4)
  buttonParamaters.height         = 0
  buttonParamaters.width          = 0
  buttonParamaters.font_size      = 500
  buttonParamaters.font_color     = "White"
  self.createButton(buttonParamaters)

  -- index 1: button to toggle "des"
  buttonParamaters.label          = "DES: ✗"
  buttonParamaters.position.z     = 0.25
  buttonParamaters.font_size      = 120
  self.createButton(buttonParamaters)

  -- index 2: button to discard a card
  buttonParamaters.label          = "Discard Random Card"
  buttonParamaters.click_function = "discardRandom"
  buttonParamaters.position.z     = 0.7
  buttonParamaters.height         = 175
  buttonParamaters.width          = 900
  buttonParamaters.font_size      = 90
  buttonParamaters.font_color     = "Black"
  self.createButton(buttonParamaters)

  -- make sure this part executes after the playermats are loaded
  Wait.time(function()
    updateColors()

    -- start loop to update card count
    playermatApi.checkForDES(matColor)
    Wait.time(updateValue, 1, -1)
  end, 1)
end

-- updates colors when object is dropped somewhere
function onDrop() updateColors() end

-- disables DES counting while hovered
function onObjectHover(hoverColor, object)
  if hoverColor ~= handColor then return end

  if object == self then
    hovering = true
    playermatApi.checkForDES(matColor)
    updateValue()
  else
    hovering = false
  end
end

-- updates the matcolor and handcolor variable
function updateColors()
  matColor = playermatApi.getMatColorByPosition(self.getPosition())
  handColor = playermatApi.getPlayerColor(matColor)
  self.setName(handColor .. " Hand Helper")
end

-- count cards in hand (by name for DES)
function updateValue()
  -- update colors if handColor doesn't own a handzone
  if Player[handColor].getHandCount() == 0 then
    updateColors()
  end

  -- if one of the colors is undefined, then end here
  if matColor == nil or handColor == nil then return end

  -- if there is still no handzone, then end here
  if Player[handColor].getHandCount() == 0 then return end

  -- get state of "Dream-Enhancing Serum" from playermat
  local hasDES = playermatApi.hasDES(matColor)

  -- default to regular count if hovered
  if hovering then
    hasDES = false
  end

  self.editButton({ index = 1, label = "DES: " .. (hasDES and "✓" or "✗") })

  -- count cards in hand
  local hand = Player[handColor].getHandObjects()
  local size = 0

  if hasDES then
    local cardHash = {}
    for _, obj in pairs(hand) do
      if obj.type == "Card" then
        local name = obj.getName()
        local title = string.match(name, '(.+)(%s%(%d+%))') or name
        cardHash[title] = true
      end
    end
    for _, title in pairs(cardHash) do
      size = size + 1
    end
  else
    for _, obj in pairs(hand) do
      if obj.type == "Card" then
        size = size + 1
      end
    end
  end

  -- update button label and color
  self.editButton({ index = 0, font_color = hasDES and "Green" or "White", label = size })
end

-- discards a random non-hidden card from hand
function discardRandom()
  playermatApi.doDiscardOne(matColor)
end
