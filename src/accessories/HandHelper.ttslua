local playermatApi  = require("playermat/PlayermatApi")

-- forward declaration of variables that are used across functions
local matColor, handColor, newModifier

local handModifiers = {
  ["60205"] = 1,  -- Arcane Enlightenment
  ["02020"] = 2,  -- Laboratory Assistant
  ["60202"] = 2,  -- Vault of Knowledge
  ["03041"] = -5, -- Drawing the Sign
  ["71023"] = 2   -- Dr. Mya Badry
}

function onLoad()
  local buttonParameters                  = {}
  buttonParameters.function_owner         = self

  local handSizeButtonParameters          = {}
  handSizeButtonParameters.function_owner = self

  -- index 0: button as hand size label
  buttonParameters.hover_color            = "White"
  buttonParameters.label                  = 0
  buttonParameters.click_function         = "none"
  buttonParameters.position               = Vector(0, 0.11, 0.15)
  buttonParameters.height                 = 0
  buttonParameters.width                  = 0
  buttonParameters.font_size              = 1000
  buttonParameters.font_color             = "White"
  self.createButton(buttonParameters)

  -- index 1: button as max handsize label
  handSizeButtonParameters.hover_color    = "White"
  handSizeButtonParameters.label          = 8
  handSizeButtonParameters.click_function = "none"
  handSizeButtonParameters.position       = { .65, .11, -.65 }
  handSizeButtonParameters.height         = 0
  handSizeButtonParameters.width          = 0
  handSizeButtonParameters.font_size      = 320
  handSizeButtonParameters.font_color     = "Green"
  self.createButton(handSizeButtonParameters)

  -- add right-click menu options
  self.addContextMenuItem("Set Hand Size", setBaseHandSize)
  self.addContextMenuItem("Modify Hand Size", addHandSizeModifier)
  self.addContextMenuItem("Reset to Default", resetHandSize)

  -- get description for modification later
  baseDescription = self.getDescription()

  -- make sure this part executes after the playermats are loaded
  Wait.time(function()
    updateColors()

    -- start loop to update card count
    Wait.time(updateValue, 1, -1)
  end, 1)
end

-- updates colors when object is dropped somewhere
function onDrop() updateColors() end

-- updates the matcolor and handcolor variable
function updateColors()
  matColor = playermatApi.getMatColorByPosition(self.getPosition())
  handColor = playermatApi.getPlayerColor(matColor)
  self.setName(handColor .. " Hand Helper")
end

function getHandSizeModifier()
  desCount = nil
  local modSize = newModifier or 0
  local deckAreaObjects = playermatApi.getDeckAreaObjects(matColor)

  -- look for  cards around playermat that modify hand size (also store value from DES if found)
  for _, obj in ipairs(playermatApi.searchAroundPlayermat(matColor, "isCard")) do
    if not obj.is_face_down and
        obj ~= deckAreaObjects.draw and
        obj ~= deckAreaObjects.topCard and
        obj ~= deckAreaObjects.discard then
      -- handle specific cards
      local md = JSON.decode(obj.getGMNotes()) or {}
      modSize = modSize + (handModifiers[md.id] or 0)

      -- store DES value in a global variable for later
      if md.id == "06159" then
        desCount = obj.call("updateValue")
      end
    end
  end
  return modSize
end

function setBaseHandSize(player)
  Player[player].showInputDialog("Set Base Max Hand Size", "5",
    function(text) modifiedBase = text end
  )
end

function addHandSizeModifier(player)
  Player[player].showInputDialog("Add Max Hand Size Modifier (e.g. for Tarot reading)", "-2",
    function(text) newModifier = (newModifier or 0) + tonumber(text) end
  )
end

function resetHandSize()
  newModifier = nil
  modifiedBase = nil
end

function getInvestigatorHandSize()
  local activeInvestigatorData = playermatApi.getActiveInvestigatorData(matColor)
  if activeInvestigatorData == nil then return 8 end
  -- Patrice Hathaway has a base handsize of 5
  if activeInvestigatorData.id == "06005" then
    return 5
  elseif activeInvestigatorData.id == "11017" then
    -- if George Barnaby, look for attachment helper nearby set to his state
    for _, obj in ipairs(playermatApi.searchAroundPlayermat(matColor)) do
      if obj.getName() == "Attachment Helper" then
        if obj.call("getLastSyncedName") == "George Barnaby" then
          return obj.getQuantity()
        end
      end
    end
    return 5
  end
  return 8
end

-- count cards in hand
function updateValue()
  -- update colors if handColor doesn't own a handzone
  if Player[handColor].getHandCount() == 0 then
    updateColors()
  end

  -- if one of the colors is undefined, then end here
  if matColor == nil or handColor == nil then return end

  -- if there is still no handzone, then end here
  if Player[handColor].getHandCount() == 0 then return end

  -- count cards in hand
  local hand = Player[handColor].getHandObjects()
  local size = 0
  local maxSize = modifiedBase or getInvestigatorHandSize()

  for _, obj in pairs(hand) do
    if obj.type == "Card" then
      size = size + 1
      local md = JSON.decode(obj.getGMNotes()) or {}
      if md.id == "10109" then -- Pelt Shipment
        maxSize = maxSize - 3
      end
    end
  end

  local handSizeModifier = getHandSizeModifier()
  local maxSizeLabel = maxSize + handSizeModifier
  local modifierText = (handSizeModifier > -1 and "+" or "") .. handSizeModifier

  -- if DES is around, use it for determining the label color
  local actualHandSize = desCount or size
  local handSizeColor = "Green"
  if actualHandSize > maxSizeLabel then
    handSizeColor = "Red"
  elseif actualHandSize >= maxSizeLabel - 1 then
    handSizeColor = "Yellow"
  end

  self.setDescription(baseDescription .. " Base maximum hand size is " .. maxSize .. ". Current total modifiers are " .. modifierText .. ".")

  if maxSizeLabel > 9 or size > 9 then
    self.editButton({ index = 1, font_size = 220, position = { .65, .11, -.7 } })
  else
    self.editButton({ index = 1, font_size = 320, position = { .65, .11, -.65 } })
  end

  -- update button label and color
  self.editButton({ index = 0, font_color = "White", label = size })
  self.editButton({ index = 1, font_color = handSizeColor, label = math.max(maxSizeLabel, 0) })
end
