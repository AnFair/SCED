do
  local TokenArrangerApi = {}

  -- gets the first object that matches the provided information
  ---@param matColor String Color of the playermat
  ---@param type String Object to look for (usually name without spaces)
  local function getObjectFromMemo(matColor, type)
    if matColor == nil or type == nil then
      return nil
    end

    for _, obj in ipairs(getObjects()) do
      local memo = obj.getMemo()
      if memo then
        local decoded = JSON.decode(memo) or {}
        if decoded.matColor == matColor and decoded.type == type then
          return obj
        end
      end
    end

    return nil
  end

  -- local function to call the token arranger, if it is on the table
  ---@param functionName String Name of the function to cal
  ---@param argument Variant Parameter to pass
  local function callIfExistent(functionName, argument)
    local tokenArranger = getObjectFromMemo("Mythos", "TokenArranger")
    if tokenArranger ~= nil then
      tokenArranger.call(functionName, argument)
    end
  end

  -- updates the token modifiers with the provided data
  ---@param tokenData Table Contains the chaos token metadata
  TokenArrangerApi.onTokenDataChanged = function(fullData)
    callIfExistent("onTokenDataChanged", fullData)
  end

  -- deletes already laid out tokens
  TokenArrangerApi.deleteCopiedTokens = function()
    callIfExistent("deleteCopiedTokens")
  end

  -- updates the laid out tokens
  TokenArrangerApi.layout = function()
    Wait.time(function() callIfExistent("layout") end, 0.1)
  end

  return TokenArrangerApi
end
