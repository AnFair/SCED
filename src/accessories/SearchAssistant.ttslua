local deckLib                   = require("util/DeckLib")
local guidReferenceApi          = require("core/GUIDReferenceApi")
local mythosAreaApi             = require("mythos/MythosAreaApi")
local playermatApi              = require("playermat/PlayermatApi")
local searchLib                 = require("util/SearchLib")

-- forward declaration of variables that are used across functions
local matColor, handColor, setAsidePosition, setAsideRotation, drawDeckPosition, topCardDetected
local addedVectorLines, addedSnapPoint
local ongoingSearch = false

local quickParameters           = {}
quickParameters.function_owner  = self
quickParameters.font_size       = 700
quickParameters.width           = 1000
quickParameters.height          = 1000
quickParameters.color           = "White"
quickParameters.scale           = Vector(0.3, 1, 0.3)

function onLoad()
  normalView()
  self.max_typed_number = 9999
end

-- regular view with search box
function normalView()
  ongoingSearch = false
  self.clearButtons()

  -- create buttons to search 3, 6 or 9 cards
  quickParameters.click_function = "search3"
  quickParameters.label          = "3"
  quickParameters.position       = { -0.5, 0.11, -0.5 }
  self.createButton(quickParameters)

  quickParameters.click_function = "search6"
  quickParameters.label          = "6"
  quickParameters.position       = { 0.5, 0.11, -0.5 }
  self.createButton(quickParameters)

  quickParameters.click_function = "search9"
  quickParameters.label          = "9"
  quickParameters.position       = { -0.5, 0.11, 0.5 }
  self.createButton(quickParameters)

  quickParameters.click_function = "search12"
  quickParameters.label          = "12"
  quickParameters.position       = { 0.5, 0.11, 0.5 }
  self.createButton(quickParameters)
end

-- click functions
function search3(_, playerColor) startSearch(playerColor, 3) end
function search6(_, playerColor) startSearch(playerColor, 6) end
function search9(_, playerColor) startSearch(playerColor, 9) end
function search12(_, playerColor) startSearch(playerColor, 12) end

-- view during a search with "done" buttons
function searchView()
  ongoingSearch = true
  self.clearButtons()

  -- create the "End Search" button
  local buttonParameters          = {}
  buttonParameters.function_owner = self
  buttonParameters.font_size      = 125
  buttonParameters.width          = 650
  buttonParameters.height         = 225
  buttonParameters.color          = "White"
  buttonParameters.click_function = "endSearch"
  buttonParameters.tooltip        = "Left-click: Return cards and shuffle\nRight-click: Return cards without shuffling"
  buttonParameters.position       = { 0, 0.11, 0 }
  buttonParameters.label          = "End Search"
  self.createButton(buttonParameters)
end

function onNumberTyped(playerColor, number)
  startSearch(playerColor, number)
end

-- start the search (change UI, set handCards aside, draw cards)
function startSearch(messageColor, number)
  if ongoingSearch then return end

  if self.getPosition().x > -15 then
    if messageColor == "Black" then
      printToColor("This does not work when playing as black.", messageColor, "Red")
      return
    end
    matColor  = playermatApi.getMatColor(messageColor)
    owner     = "Mythos"
    handColor = messageColor
  else
    matColor  = playermatApi.getMatColorByPosition(self.getPosition())
    owner     = matColor
    handColor = playermatApi.getPlayerColor(matColor)
  end

  topCardDetected = false

  -- get draw deck
  local deckAreaObjects
  if owner == "Mythos" then
    deckAreaObjects = mythosAreaApi.getEncounterDeckObjects()
  else
    deckAreaObjects = playermatApi.getDeckAreaObjects(matColor)
  end

  if deckAreaObjects.draw == nil and deckAreaObjects.topCard == nil then
    printToColor(owner .. " draw deck could not be found!", messageColor, "Red")
    return
  end

  if owner ~= "Mythos" then
    -- check for harbinger
    local harbinger
    if deckAreaObjects.topCard then
      harbinger = isHarbinger(deckAreaObjects.topCard.getGMNotes())
    elseif deckAreaObjects.draw and not deckAreaObjects.draw.is_face_down then
      local cards = deckAreaObjects.draw.getObjects()
      harbinger = isHarbinger(cards[#cards].gm_notes)
    end

    if harbinger then
      printToColor("The Harbinger is on top of your deck, searching isn't allowed.", messageColor)
      return
    end
  end

  -- get bounds to know the height of the deck
  local bounds = (deckAreaObjects.draw and deckAreaObjects.draw.getBounds()) or (deckAreaObjects.topCard and deckAreaObjects.topCard.getBounds())
  drawDeckPosition = bounds.center + Vector(0, bounds.size.y / 2 + 0.2, 0)

  if owner ~= "Mythos" then
    printToColor("Place target(s) of search on set aside spot.", messageColor, "Green")

    -- get playermat orientation
    local offset = self.getBoundsNormalized().center.z < 0 and 15 or -15

    -- get position and rotation for set aside cards
    local handData   = Player[handColor].getHandTransform()
    local handCards  = Player[handColor].getHandObjects()
    setAsidePosition = (handData.position + offset * handData.right):setAt("y", 1.5)
    setAsideRotation = Vector(handData.rotation.x, handData.rotation.y + 180, 180)

    -- place hand cards set aside
    if #handCards > 0 then
      deckLib.placeOrMergeIntoDeck(handCards, setAsidePosition, setAsideRotation)
    end

    -- add a temporary snap point for the set aside spot
    addedSnapPoint = { position = setAsidePosition, rotation = setAsideRotation }
    local snapPoints = Global.getSnapPoints() or {}
    table.insert(snapPoints, addedSnapPoint)
    Global.setSnapPoints(snapPoints)

    -- add a temporary box for the set aside spot
    local vectorLines = Global.getVectorLines() or {}
    local boxSize = Vector(2.5, 0, 3.5)
    addedVectorLines = generateBoxData(setAsidePosition, boxSize, setAsideRotation.y, handColor)

    for _, line in ipairs(addedVectorLines) do
      table.insert(vectorLines, line)
    end
    Global.setVectorLines(vectorLines)
  end

  -- handling for Norman Withers / Eye of Ghatanothoa
  if deckAreaObjects.topCard then
    deckAreaObjects.topCard.deal(1, handColor)
    number = number - 1
    topCardDetected = true
  end

  if number > 0 then
    searchView()

    if owner == "Mythos" then
      -- create an additional hand zone
      local handZone = guidReferenceApi.getObjectByOwnerAndType(matColor, "HandZone")
      local data = handZone.getData()
      data.Transform.posX = -15
      data.Transform.posZ = self.getPosition().z
      data.Transform.rotY = 90
      local newHand = spawnObjectData({ data = data })
      guidReferenceApi.editIndex(matColor, "HandZone2", newHand.getGUID())
      Wait.frames(function() deckAreaObjects.draw.deal(number, handColor, 2) end, 3)
    else
      deckAreaObjects.draw.deal(number, handColor)
    end
  end
end

function isHarbinger(notes)
  local md = JSON.decode(notes or "") or {}
  return md.id == "08006"
end

-- place handCards back into deck and optionally shuffle
function endSearch(_, _, isRightClick)
  local handCards

  if owner == "Mythos" then
    handCards = Player[handColor].getHandObjects(2)
  else
    handCards = Player[handColor].getHandObjects()
  end

  -- place cards on deck
  deckLib.placeOrMergeIntoDeck(handCards, drawDeckPosition, setAsideRotation or self.getRotation():setAt("z", 180))

  if owner == "Mythos" then
    local handZone2 = guidReferenceApi.getObjectByOwnerAndType(matColor, "HandZone2")
    if handZone2 then
      Wait.time(function() handZone2.destruct() end, 0.5 + #handCards * 0.1)
      guidReferenceApi.editIndex(matColor, "HandZone2", nil)
    end
  else
    -- draw set aside cards (from the ground!)
    Wait.time(drawSetAsideCards, 0.5 + #handCards * 0.1)
  end

  normalView()

  Wait.time(function()
    -- maybe shuffle deck
    if not isRightClick then
      local deckAreaObjects
      if owner == "Mythos" then
        deckAreaObjects = mythosAreaApi.getEncounterDeckObjects()
      else
        deckAreaObjects = playermatApi.getDeckAreaObjects(matColor)
      end

      if deckAreaObjects.draw then
        deckAreaObjects.draw.shuffle()
      end
    end

    -- Norman Withers / Eye of Ghatanothoa handling
    if topCardDetected then
      if owner == "Mythos" then
        mythosAreaApi.flipTopCardFromDeck()
      else
        playermatApi.flipTopCardFromDeck(matColor)
      end
    end
  end, 1 + #handCards * 0.1)
end

function drawSetAsideCards()
  for _, obj in ipairs(searchLib.atPosition(setAsidePosition, "isCardOrDeck")) do
    local count = 1
    if obj.type == "Deck" then
      count = #obj.getObjects()
    end
    obj.deal(count, handColor)
  end
  removeAddedSnapAndLines()
end

function removeAddedSnapAndLines()
  local vectorLines = Global.getVectorLines() or {}
  local snapPoints = Global.getSnapPoints() or {}

  -- look for previously added data and remove it (iterate in reverse because we're removing entries)
  for i = #vectorLines, 1, -1 do
    for _, boxLine in ipairs(addedVectorLines) do
      if vectorLines[i].points[1] == boxLine.points[1] and vectorLines[i].points[2] == boxLine.points[2] then
        table.remove(vectorLines, i)
        break
      end
    end
  end

  for i = #snapPoints, 1, -1 do
    if snapPoints[i].position == addedSnapPoint.position then
      table.remove(snapPoints, i)
      break
    end
  end

  Global.setVectorLines(vectorLines)
  Global.setSnapPoints(snapPoints)
end

-- generates the lines data for a rectangular box
---@param center tts__Vector Center of the box
---@param size tts__Vector X and Z dimension of the box
---@param rotation number Rotation around the Y-axis for the box
---@param boxColor string Color for the box
---@return table lines Vector line data for the box
function generateBoxData(center, size, rotation, boxColor)
  local halfWidth = size.x / 2
  local halfDepth = size.z / 2

  -- corners of the box in local coordinates
  local corners = {
    Vector(-halfWidth, 0, -halfDepth),
    Vector(halfWidth, 0, -halfDepth),
    Vector(halfWidth, 0, halfDepth),
    Vector(-halfWidth, 0, halfDepth)
  }

  -- translate corners to global coordinates
  for i, cornerVec in ipairs(corners) do
    local rotatedCornerVec = cornerVec:rotateOver('y', rotation)
    corners[i] = rotatedCornerVec + center
  end

  -- generate the lines data
  local lines = {
    {
      points = { corners[1], corners[2] },
      color = boxColor
    },
    {
      points = { corners[2], corners[3] },
      color = boxColor
    },
    {
      points = { corners[3], corners[4] },
      color = boxColor
    },
    {
      points = { corners[4], corners[1] },
      color = boxColor
    }
  }

  return lines
end
