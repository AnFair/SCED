local deckLib                   = require("util/DeckLib")
local guidReferenceApi          = require("core/GUIDReferenceApi")
local mythosAreaApi             = require("mythos/MythosAreaApi")
local playermatApi              = require("playermat/PlayermatApi")

-- forward declaration of variables that are used across functions
local matColor, handColor, setAsideRotation, drawDeckPosition, topCardDetected
local ongoingSearch = false

local quickParameters           = {}
quickParameters.function_owner  = self
quickParameters.font_size       = 700
quickParameters.width           = 1000
quickParameters.height          = 1000
quickParameters.color           = "White"
quickParameters.scale           = Vector(0.3, 1, 0.3)

function onLoad()
  normalView()
  self.max_typed_number = 9999
end

-- regular view with search box
function normalView()
  ongoingSearch = false
  self.clearButtons()

  -- create buttons to search 3, 6 or 9 cards
  quickParameters.click_function = "search3"
  quickParameters.label          = "3"
  quickParameters.position       = { -0.5, 0.11, -0.5 }
  self.createButton(quickParameters)

  quickParameters.click_function = "search6"
  quickParameters.label          = "6"
  quickParameters.position       = { 0.5, 0.11, -0.5 }
  self.createButton(quickParameters)

  quickParameters.click_function = "search9"
  quickParameters.label          = "9"
  quickParameters.position       = { -0.5, 0.11, 0.5 }
  self.createButton(quickParameters)

  quickParameters.click_function = "search12"
  quickParameters.label          = "12"
  quickParameters.position       = { 0.5, 0.11, 0.5 }
  self.createButton(quickParameters)
end

-- click functions
function search3(_, playerColor) startSearch(playerColor, 3) end
function search6(_, playerColor) startSearch(playerColor, 6) end
function search9(_, playerColor) startSearch(playerColor, 9) end
function search12(_, playerColor) startSearch(playerColor, 12) end

-- view during a search with "done" buttons
function searchView()
  ongoingSearch = true
  self.clearButtons()
end

function onNumberTyped(playerColor, number)
  if number > 0 then
    startSearch(playerColor, number)
  end
end

-- start the search (change UI, draw cards)
function startSearch(messageColor, number)
  if ongoingSearch then return end

  -- intentionally global
  owner = guidReferenceApi.getOwnerOfObject(self)
  if owner == "Mythos" then
    if messageColor == "Black" then
      printToColor("This does not work when playing as black.", messageColor, "Red")
      return
    end
    matColor  = playermatApi.getMatColor(messageColor)
    handColor = messageColor
  else
    matColor  = owner
    handColor = playermatApi.getPlayerColor(matColor)
  end

  topCardDetected = false

  -- get draw deck
  local deckAreaObjects
  if owner == "Mythos" then
    deckAreaObjects = mythosAreaApi.getEncounterDeckObjects()
  else
    deckAreaObjects = playermatApi.getDeckAreaObjects(matColor)
  end

  if deckAreaObjects.draw == nil and deckAreaObjects.topCard == nil then
    printToColor(owner .. " draw deck could not be found!", messageColor, "Red")
    return
  end

  if owner ~= "Mythos" then
    -- check for harbinger
    local harbinger
    if deckAreaObjects.topCard then
      harbinger = isHarbinger(deckAreaObjects.topCard.getGMNotes())
    elseif deckAreaObjects.draw and not deckAreaObjects.draw.is_face_down then
      local cards = deckAreaObjects.draw.getObjects()
      harbinger = isHarbinger(cards[#cards].gm_notes)
    end

    if harbinger then
      printToColor("The Harbinger is on top of your deck, searching isn't allowed.", messageColor)
      return
    end
  end

  -- get bounds to know the height of the deck
  local bounds = (deckAreaObjects.draw and deckAreaObjects.draw.getBounds()) or (deckAreaObjects.topCard and deckAreaObjects.topCard.getBounds())
  drawDeckPosition = bounds.center + Vector(0, bounds.size.y / 2 + 0.2, 0)

  local handData = Player[handColor].getHandTransform()

  -- create an additional hand zone
  local handZone = guidReferenceApi.getObjectByOwnerAndType(matColor, "HandZone")
  local data = handZone.getData()
  local position = (self.getPosition() - handData.forward * 7.5):setAt("y", data.Transform.posY)
  if owner ~= "Mythos" then position = position:setAt("z", data.Transform.posZ) end
  local newHand = spawnObjectData({ data = data, position = position })
  newHand.scale({x = 1, y = 1, z = .6})
  guidReferenceApi.editIndex(matColor, "HandZone2", newHand.getGUID())
  helperGuid = self.getGUID()

  -- add XML labels
  newHand.UI.setXmlTable({
    {
      tag = "Panel",
      attributes = {
        height = 120,
        width = 1500,
        scale = ".025 .167 1",
        rotation = "0 0 0",
        position = "0 64 30",
      },
      children = {
        {
          tag = "TableLayout",
          attributes = { cellSpacing = "250" },
          children = {
            {
              tag = "Row",
              children = {
                {
                  tag = "Cell",
                  children = {
                    {
                      tag = "Panel",
                      attributes = { color = "#b6e2f099" },
                      children = {
                        {
                          tag = "Text",
                          attributes = { font = "font_teutonic-arkham", fontSize = "100" },
                          value = "← Top"
                        }
                      }
                    }
                  }
                },
                {
                  tag = "Cell",
                  children = {
                    {
                      tag = "Panel",
                      attributes = { color = "#b6e2f099" },
                      children = {
                        {
                          tag = "Text",
                          attributes = { font = "font_teutonic-arkham", fontSize = "100" },
                          value = "Bottom →"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      tag = "Panel",
      attributes = {
        height = 170,
        width = 1500,
        scale = ".025 .167 1",
        rotation = "0 0 0",
        position = "0 -67 30",
      },
      children = {
        {
          tag = "TableLayout",
          attributes = { cellSpacing = "250", cellBackgroundColor="#b6e2f0"},
          children = {
          {
            tag = "Row",
            children = {
              {
                tag = "Cell",
                children = {
                  {
                    tag = "Panel",
                    attributes = { color = "#b6e2f0D9" },
                    children = {
                      {
                        tag = "Button",
                        attributes = {
                          color="#ffffff00",
                          fontSize = "150",
                          onClick = helperGuid .. "/endSearch(true)",
                          tooltip = "Return cards and shuffle",
                          font = "font_teutonic-arkham",
                          textColors = "#000000|#009acb|#005a77"
                          },
                        value = "Shuffle in"
                      }
                    }
                  }
                }
              },
              {
                tag = "Cell",
                children = {
                  {
                    tag = "Panel",
                    attributes = { color = "#b6e2f0D9" },
                    children = {
                      {
                        tag = "Button",
                        attributes = {
                          color="#ffffff00",
                          fontSize = "150",
                          onClick = helperGuid .. "/endSearch(false)",
                          tooltip = "Return cards without shuffling",
                          font = "font_teutonic-arkham",
                          textColors = "#000000|#009acb|#005a77"
                        },
                        value = "Keep Order"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  })

  -- handling for Norman Withers / Eye of Ghatanothoa
  if deckAreaObjects.topCard then
    Wait.frames(function() deckAreaObjects.topCard.deal(1, handColor, 2) end, 3)

    number = number - 1
    topCardDetected = true
  end

  searchView()

  if number > 0 then
    Wait.frames(function() deckAreaObjects.draw.deal(number, handColor, 2) end, 3 + (topCardDetected and 30 or 0))
  end
end

function isHarbinger(notes)
  local md = JSON.decode(notes or "") or {}
  return md.id == "08006"
end

function endSearch(_, shuffle)
  local handCards

  handCards = Player[handColor].getHandObjects(2)

  -- place cards on deck
  deckLib.placeOrMergeIntoDeck(handCards, drawDeckPosition, setAsideRotation or self.getRotation():setAt("z", 180))

  local handZone2 = guidReferenceApi.getObjectByOwnerAndType(matColor, "HandZone2")
  if handZone2 then
    Wait.time(function() handZone2.destruct() end, 0.5 + #handCards * 0.1)
    guidReferenceApi.editIndex(matColor, "HandZone2", nil)
  end

  normalView()

  Wait.time(function()
    -- maybe shuffle deck
    if shuffle == "true" then
      local deckAreaObjects
      if owner == "Mythos" then
        deckAreaObjects = mythosAreaApi.getEncounterDeckObjects()
      else
        deckAreaObjects = playermatApi.getDeckAreaObjects(matColor)
      end

      if deckAreaObjects.draw then
        deckAreaObjects.draw.shuffle()
      end
    end

    -- Norman Withers / Eye of Ghatanothoa handling
    if topCardDetected then
      if owner == "Mythos" then
        mythosAreaApi.flipTopCardFromDeck()
      else
        playermatApi.flipTopCardFromDeck(matColor)
      end
    end
  end, 1 + #handCards * 0.1)
end
