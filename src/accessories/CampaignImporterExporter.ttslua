local blessCurseApi     = require("chaosbag/BlessCurseManagerApi")
local chaosBagApi       = require("chaosbag/ChaosBagApi")
local deckImporterApi   = require("arkhamdb/DeckImporterApi")
local guidReferenceApi  = require("core/GUIDReferenceApi")
local optionPanelApi    = require("core/OptionPanelApi")
local playAreaApi       = require("core/PlayAreaApi")
local playmatApi        = require("playermat/PlaymatApi")

-- base data for token creation
local campaignTokenData = {
  Name = "Custom_Model_Bag",
  Transform = {
    posX = -21.25,
    posY = 1.68,
    posZ = 55.59,
    rotX = 0,
    rotY = 270,
    rotZ = 0,
    scaleX = 2,
    scaleY = 2,
    scaleZ = 2
  },
  Description = "SCED Importer Token",
  Tags = { "ImporterToken" },
  CustomMesh = {
    MeshURL = "http://cloud-3.steamusercontent.com/ugc/943949966265929204/A38BB5D72419E6298385556D931877C0A1A55C17/",
    DiffuseURL = "http://cloud-3.steamusercontent.com/ugc/254843371583188147/920981125E37B5CEB6C400E3FD353A2C428DA969/",
    ColliderURL = "http://cloud-3.steamusercontent.com/ugc/943949966265929204/A38BB5D72419E6298385556D931877C0A1A55C17/",
    Convex = true,
    MaterialIndex = 2,
    TypeIndex = 6,
    CustomShader = {
      SpecularColor = {
        r = 0.72,
        g = 0.51,
        b = 0.34
      },
      SpecularIntensity = 0.4,
      SpecularSharpness = 7.0,
      FresnelStrength = 0.0
    }
  }
}

function onLoad()
  self.createButton({
    click_function = "createCampaignToken",
    function_owner = self,
    label = "Export",
    tooltip = "Create a campaign save token!",
    position = { x = -1, y = 0.21, z = 0 },
    font_size = 400,
    width = 1400,
    height = 600,
    scale = { 0.5, 1, 0.5 }
  })
end

function onObjectLeaveContainer(container)
  if container.hasTag("ImporterToken") then
    broadcastToAll("Removing objects from the Save Coin bag will break functionality. Please return the removed objects.", "Yellow")
  end
end

function onObjectEnterContainer(container)
  if container.hasTag("ImporterToken") then
    broadcastToAll("Adding objects to the Save Coin bag will break functionality. Please remove the objects.", "Yellow")
  end
end

---------------------------------------------------------
-- main import functions (split up to allow for Wait conditions)
---------------------------------------------------------

function onCollisionEnter(info)
  if info.collision_object.hasTag("ImporterToken") then
    importFromToken(info.collision_object)
  end
end

-- identifies import token, determines campaign box and downloads it (if needed)
function importFromToken(coin)
  broadcastToAll("Campaign Import Initiated")
  local importData = JSON.decode(coin.getGMNotes())
  local campaignBox = getObjectFromGUID(importData["box"])

  if not campaignBox then
    broadcastToAll("Campaign Box not present on table!", "Red")
    return
  end

  if campaignBox.type == "Generic" then
    campaignBox.call("buttonClick_download")
  end

  Wait.condition(
    function()
      local campaignBox = getObjectFromGUID(importData["box"])
      if #campaignBox.getObjects() > 0 then
        placeCampaignFromToken(importData, coin)
      else
        restoreCampaignData(importData, coin)
      end
    end,
    function()
      local obj = getObjectFromGUID(importData["box"])
      if obj == nil then
        return false
      else
        return obj.type == "Bag"
      end
    end,
    2,
    function() broadcastToAll("Error loading campaign box") end
  )
end

-- after box has been downloaded, places content on table
function placeCampaignFromToken(importData, coin)
  getObjectFromGUID(importData["box"]).call("buttonClick_place")
  Wait.condition(
    function() restoreCampaignData(importData, coin) end,
    function() return findUniqueObjectWithTag("CampaignLog") ~= nil end,
    2,
    function() broadcastToAll("Error placing campaign box") end
  )
end

-- after content is placed on table, conducts all the other import operations
function restoreCampaignData(importData, coin)
  -- go over internal items and respawn them (only storing campaign log and additional player cards)
  for _, objData in ipairs(coin.getData().ContainedObjects) do
    objData.Locked = true
    local spawnData = { data = objData }

    -- maybe restore position of item and destroy duplicate
    if objData.Nickname == "Additional Player Cards" then
      local additionalIndex = guidReferenceApi.getObjectByOwnerAndType("Mythos", "AdditionalPlayerCardsBag")
      spawnData.position = additionalIndex.getPosition()
      additionalIndex.destruct()
    else
      local campaignLog = findUniqueObjectWithTag("CampaignLog")
      if campaignLog then
        spawnData.position = campaignLog.getPosition()
        campaignLog.destruct()
      end
    end

    spawnObjectData(spawnData)
  end

  chaosBagApi.setChaosBagState(importData["bag"])

  -- populate trauma values
  if importData["trauma"] then
    setTrauma(importData["trauma"])
  end

  -- populate ArkhamDB deck IDs
  if importData["decks"] then
    deckImporterApi.setUiState(importData["decks"])
  end

  -- maybe set campaign guide page (unless it was on the first page)
  if importData["guide"] and importData["guide"] ~= 0 then
    local campaignGuide = findUniqueObjectWithTag("CampaignGuide")
    if campaignGuide then
      Wait.condition(
        -- Called after the condition function returns true
        function() printToAll("Campaign Guide import successful!") end,
        -- Condition function that is called continuously until it returns true or timeout is reached
        function() return campaignGuide.Book.setPage(importData["guide"]) end,
        -- Amount of time in seconds until the Wait times out
        2,
        -- Called if the Wait times out
        function() printToAll("Campaign Guide import failed!") end
      )
    end
  end

  Wait.time(function() optionPanelApi.loadSettings(importData["options"]) end, 0.5)

  -- destroy Tour Starter token
  local tourStarter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "TourStarter")
  if tourStarter then
    tourStarter.destruct()
  end

  -- restore PlayArea image and player count
  playAreaApi.updateSurface(importData["playarea"])
  playAreaApi.setInvestigatorCount(importData["clueCount"])

  -- restore Playmat slots
  if importData["slotData"] then
    for matColor, slotData in pairs(importData["slotData"]) do
      playmatApi.loadSlotData(matColor, slotData)
    end
  end

  coin.destruct()
  broadcastToAll("Campaign successfully imported!", "Green")
end

-- creates a campaign token with save data encoded into GM Notes based on the current state of the table
function createCampaignToken(_, playerColor, _)
  local campaignData = {}

  -- need to reset the contained objects to support multiple exports
  campaignTokenData.ContainedObjects = {}

  -- find active campaign
  local campaignBox
  for _, obj in ipairs(getObjectsWithTag("CampaignBox")) do
    if obj.type == "Bag" and #obj.getObjects() == 0 then
      if not campaignBox then
        campaignBox = obj
      else
        broadcastToAll("Multiple empty campaign boxes detected; delete all but one.", "Red")
        return
      end
    end
  end

  if not campaignBox then
    broadcastToAll("Campaign box with all placed objects not found!", "Red")
    return
  end

  -- clean up chaos tokens (needs to happen before saving chaos bag state)
  blessCurseApi.removeAll(playerColor)
  chaosBagApi.releaseAllSealedTokens(playerColor)

  -- main data collection
  campaignData.box = campaignBox.getGUID()
  campaignData.bag = chaosBagApi.getChaosBagState()
  campaignData.decks = deckImporterApi.getUiState()
  campaignData.clueCount = playAreaApi.getInvestigatorCount()
  campaignData.playarea = playAreaApi.getSurface()
  campaignData.options = optionPanelApi.getOptions()

  -- save campaign log if present
  local campaignLog = findUniqueObjectWithTag("CampaignLog")
  if campaignLog then
    local logData = campaignLog.getData()
    logData.Locked = false
    table.insert(campaignTokenData.ContainedObjects, logData)

    -- maybe also extract the trauma values
    local trauma = campaignLog.getVar("returnTrauma")
    if trauma then
      printToAll("Trauma values found in campaign log!", "Green")
      campaignData.trauma = {}
      for _, val in ipairs(campaignLog.call("returnTrauma")) do
        table.insert(campaignData.trauma, val)
      end
    else
      printToAll("Trauma values could not be found in campaign log!", "Yellow")
    end
  end

  -- store campaign guide page if present
  local campaignGuide = findUniqueObjectWithTag("CampaignGuide")
  if campaignGuide then
    campaignData.guide = campaignGuide.Book.getPage()
  end

  -- store the additional index if there are any cards in it
  local additionalIndex = guidReferenceApi.getObjectByOwnerAndType("Mythos", "AdditionalPlayerCardsBag")
  if additionalIndex and #additionalIndex.getObjects() > 0 then
    local indexData = additionalIndex.getData()
    indexData.Locked = false
    table.insert(campaignTokenData.ContainedObjects, indexData)
  end

  -- get the slot symbol data for each playmat (use GUIDReferenceApi to only get this for existing playmats)
  campaignData.slotData = {}
  for matColor, _ in pairs(guidReferenceApi.getObjectsByType("Playermat")) do
    local slotData = playmatApi.getSlotData(matColor)
    campaignData.slotData[matColor] = slotData
  end

  -- finish the data for the campaign token
  campaignTokenData.GMNotes = JSON.encode(campaignData)
  campaignTokenData.Nickname = campaignBox.getName() .. os.date(" %b %d") .. " Save"

  spawnObjectData({ data = campaignTokenData })
  broadcastToAll("Campaign successfully exported! Save coin object to import on a different save.", "Green")
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

function findUniqueObjectWithTag(tag)
  local objects = getObjectsWithTag(tag)
  if not objects then return end

  if #objects == 1 then
    return objects[1]
  elseif #objects == 0 then
    broadcastToAll("No " .. tag .. " detected; ensure it has the correct tag.", "Red")
  else
    broadcastToAll("More than one " .. tag .. " detected; delete all but one.", "Red")
  end
end

function setTrauma(trauma)
  for i, matColor in ipairs({ "White", "Orange", "Green", "Red" }) do
    playmatApi.updateCounter(matColor, "DamageCounter", trauma[i])
    playmatApi.updateCounter(matColor, "HorrorCounter", trauma[i + 4])
  end
end
