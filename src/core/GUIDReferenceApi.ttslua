do
  local GUIDReferenceApi = {}

  -- local function for nil handling
  ---@param functionName string Name of the function to call
  ---@param argument? table Parameter to pass
  local function callIfExistent(functionName, argument)
    local handler = getObjectFromGUID("123456")
    if handler ~= nil then
      return handler.call(functionName, argument)
    end
  end

  -- Returns the matching object
  ---@param owner string Parent object for this search
  ---@param type string Type of object to search for
  ---@return any: Object reference to the matching object
  function GUIDReferenceApi.getObjectByOwnerAndType(owner, type)
    return callIfExistent("getObjectByOwnerAndType", { owner = owner, type = type })
  end

  -- Returns all matching objects as a table with references
  ---@param type string Type of object to search for
  ---@return table: List of object references to matching objects
  function GUIDReferenceApi.getObjectsByType(type)
    return callIfExistent("getObjectsByType", type)
  end

  -- Returns all matching objects as a table with references
  ---@param owner string Parent object for this search
  ---@return table: List of object references to matching objects
  function GUIDReferenceApi.getObjectsByOwner(owner)
    return callIfExistent("getObjectsByOwner", owner)
  end

  -- Sends new information to the reference handler to edit the main index (if type/guid are omitted, entry will be removed)
  ---@param owner string Parent of the object
  ---@param type? string Type of the object
  ---@param guid? string GUID of the object
  function GUIDReferenceApi.editIndex(owner, type, guid)
    return callIfExistent("editIndex", {
      owner = owner,
      type = type,
      guid = guid
    })
  end

  -- Returns the owner of an object or the object it's located on
  ---@param object tts__GameObject Object for this search
  ---@return string: Parent of the object or object it's located on
  function GUIDReferenceApi.getOwnerOfObject(object)
    return callIfExistent("getOwnerOfObject", object)
  end

  -- Remove object
  ---@param owner string Parent of the object
  ---@param type string Type of the object
  function GUIDReferenceApi.removeObjectByOwnerAndType(owner, type)
    return callIfExistent("removeObjectByOwnerAndType", {
      owner = owner,
      type = type
    })
  end

  return GUIDReferenceApi
end
