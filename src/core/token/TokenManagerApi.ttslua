do
  local TokenManagerApi = {}

  -- Pushes new location data into the local copy of the Data Helper location data.
  ---@param dataTable table Key/Value pairs following the DataHelper style
  function TokenManagerApi.addLocationData(dataTable)
    Global.call("TokenManager.addLocationData", dataTable)
  end

  -- Pushes new player card data into the local copy of the Data Helper player data.
  ---@param dataTable table Key/Value pairs following the DataHelper style
  function TokenManagerApi.addPlayerCardData(dataTable)
    Global.call("TokenManager.addPlayerCardData", dataTable)
  end

  -- Spawns tokens for the card. This function is built to just throw a card at it and let it do
  -- the work once a card has hit an area where it might spawn tokens. It will check to see if
  -- the card has already spawned, find appropriate data from either the uses metadata or the Data
  -- Helper, and spawn the tokens.
  ---@param card tts__Object Card to maybe spawn tokens for
  ---@param extraUses table A table of <use type>=<count> which will modify the number of tokens
  ---    spawned for that type. e.g. Akachi's playermat should pass "Charge"=1
  function TokenManagerApi.spawnForCard(card, extraUses)
    Global.call("TokenManager.spawnForCard", { card = card, extraUses = extraUses })
  end

  -- Spawns a single token at the given global position by copying it from the template bag.
  ---@param position tts__Vector Global position to spawn the token
  ---@param tokenType string Type of token to spawn (template needs to be in source bag)
  ---@param rotation tts__Vector Rotation to be used for the new token. Only the y-value will be used,
  --     x and z will use the default rotation from the source bag
  ---@param callback? function A callback function triggered after the new token is spawned
  function TokenManagerApi.spawnToken(position, tokenType, rotation, callback)
    Global.call("TokenManager.spawnToken", {
      position = position,
      tokenType = tokenType,
      rotation = rotation,
      callback = callback
    })
  end

  -- Spawns a set of tokens on the given card.
  ---@param card tts__Object Card to spawn tokens on
  ---@param tokenType string Type of token to spawn (template needs to be in source bag)
  ---@param tokenCount number How many tokens to spawn. For damage or horror this value will be set to the
  --     spawned state object rather than spawning multiple tokens
  ---@param shiftDown? number An offset for the z-value of this group of tokens
  ---@param subType? string Subtype of token to spawn. This will only differ from the tokenName for resource tokens
  function TokenManagerApi.spawnTokenGroup(card, tokenType, tokenCount, shiftDown, subType)
    Global.call("TokenManager.spawnTokenGroup", {
      card = card,
      tokenType = tokenType,
      tokenCount = tokenCount,
      shiftDown = shiftDown,
      subType = subType
    })
  end

  -- Checks a card for metadata to maybe replenish it
  ---@param card tts__Object Card object to be replenished
  ---@param uses table The already decoded metadata.uses (to avoid decoding again)
  function TokenManagerApi.maybeReplenishCard(card, uses)
    Global.call("TokenManager.maybeReplenishCard", { card = card, uses = uses })
  end

  return TokenManagerApi
end
