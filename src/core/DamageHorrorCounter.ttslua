local MIN_VALUE, MAX_VALUE = 0, 99
val = 0

function onSave() return JSON.encode(val) end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    val = JSON.decode(savedData)
  end

  self.max_typed_number = MAX_VALUE

  createXml()

  self.addContextMenuItem("Add 5", function() modifyValue(5) end)
  self.addContextMenuItem("Subtract 5", function() modifyValue(-5) end)
  self.addContextMenuItem("Add 10", function() modifyValue(10) end)
  self.addContextMenuItem("Subtract 10", function() modifyValue(-10) end)
end

function getXmlParameters()
  local tokenType = self.getMemo()
  if tokenType == "damage" then
    return {
      size = 550,
      fontSize = 700,
      offsetXY = "0 0",
      color = "#fe1b17f0"
    }
  elseif tokenType == "horror" then
    return {
      size = 550,
      fontSize = 700,
      offsetXY = "30 0",
      color = "#273784f4"
    }
  else
    printToAll("Invalid token type")
  end
end

function createXml()
  params = getXmlParameters()
  if not params then return end

  local uiColor, uiVal = getUiColorAndVal()
  local xml = {
    {
      tag = "Panel",
      attributes = {
        id = "valuePanel",
        onClick = "addOrSubtract",
        image = "circle",
        scale = "0.4 0.4 1",
        color = uiColor,
        height = params.size,
        width = params.size,
        position = "0 0 -6",
        rotation = "0 0 180",
        offsetXY = params.offsetXY
      },
      children = {
        {
          tag = "Text",
          attributes = {
            id = "valueText",
            text = uiVal,
            color = "#FFFFFF",
            fontSize = params.fontSize,
            font = "font_teutonic-arkham"
          }
        }
      }
    }
  }
  self.UI.setXmlTable(xml)
end

-- hovered for >X seconds and same value -> no click-function until next hover
function onHover(playerColor)
  self.UI.setAttribute("valuePanel", "raycastTarget", true)
  self.highlightOff("Green")

  -- cancel ongoing wait
  if waitId then Wait.stop(waitId) end

  local hoverVal = val
  waitId = Wait.time(function()
    if Player[playerColor] and Player[playerColor].getHoverObject() == self and hoverVal == val then
      self.UI.setAttribute("valuePanel", "raycastTarget", false)
      self.highlightOn("Green")
    end
  end, 2)
end

-- rotate to face-up when dropped
function onDrop()
  self.setRotation(self.getRotation():setAt("z", 0))
end

-- value == 1 -> no label/background
function getUiColorAndVal()
  if val == 1 then
    return "#00000000", ""
  else
    return params.color, val
  end
end

function updateLabel()
  local uiColor, uiVal = getUiColorAndVal()
  self.UI.setAttribute("valuePanel", "color", uiColor)
  self.UI.setAttribute("valueText", "text", uiVal)
end

-- sets the value to 'newVal'
function updateVal(newVal)
  if tonumber(newVal) then
    val = math.min(math.max(newVal, MIN_VALUE), MAX_VALUE)
    updateLabel()
  end
end

-- modifies the value by 'mod'
function modifyValue(mod)
  local newVal = math.min(math.max(val + tonumber(mod), MIN_VALUE), MAX_VALUE)
  updateVal(newVal)
end

-- left-click: increase / right-click: decrease / middle-click: reset
function addOrSubtract(_, clickType)
  local mod = 1
  if clickType == "-2" then
    mod = -1
  elseif clickType == "-3" then
    updateVal(1)
    return
  end
  modifyValue(mod)
end

function onNumberTyped(_, number)
  updateVal(number)
end
