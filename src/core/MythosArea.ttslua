local deckLib = require("util/DeckLib")
local guidReferenceApi = require("core/GUIDReferenceApi")
local playAreaApi = require("core/PlayAreaApi")
local playermatApi = require("playermat/PlayermatApi")
local searchLib = require("util/SearchLib")
local tokenArrangerApi = require("accessories/TokenArrangerApi")
local tokenChecker = require("core/token/TokenChecker")
local tokenSpawnTrackerApi = require("core/token/TokenSpawnTrackerApi")

local ENCOUNTER_DECK_AREA = {
  upperLeft = { x = 0.9, z = 0.42 },
  lowerRight = { x = 0.86, z = 0.38 }
}
local ENCOUNTER_DISCARD_AREA = {
  upperLeft = { x = 1.62, z = 0.42 },
  lowerRight = { x = 1.58, z = 0.38 }
}

-- global position of encounter deck and discard pile
local ENCOUNTER_DECK_POS = { x = -3.93, y = 1, z = 5.76 }
local ENCOUNTER_DISCARD_POSITION = { x = -3.85, y = 1, z = 10.38 }
local isReshuffling = false
local collisionEnabled = false
local currentScenario, useFrontData, tokenData

function onSave()
  return JSON.encode({
    currentScenario = currentScenario,
    useFrontData    = useFrontData,
    tokenData       = tokenData
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedState = JSON.decode(savedData) or {}
    currentScenario   = loadedState.currentScenario or ""
    useFrontData      = loadedState.useFrontData or true
    tokenData         = loadedState.tokenData or {}
  end
  Wait.time(function() collisionEnabled = true end, 0.1)
end

---------------------------------------------------------
-- collison and container event handling
---------------------------------------------------------

-- TTS event handler.  Handles scenario name event triggering and encounter card token resets.
function onCollisionEnter(collisionInfo)
  if not collisionEnabled then return end

  local object = collisionInfo.collision_object

  -- early exit for better performance
  if object.type ~= "Card" then return end

  -- get scenario name and maybe fire followup event
  if object.getName() == "Scenario" then
    local description = object.getDescription()

    -- detect if a new scenario card is placed down
    if currentScenario ~= description then
      currentScenario = description
      fireScenarioChangedEvent()
    end

    local metadata = JSON.decode(object.getGMNotes()) or {}
    if not metadata["tokens"] then
      tokenData = {}
      return
    end

    -- detect orientation of scenario card (for difficulty)
    useFrontData = not object.is_face_down
    tokenData = metadata["tokens"][(useFrontData and "front" or "back")]
    fireTokenDataChangedEvent()
  end

  local localPos = self.positionToLocal(object.getPosition())
  if inArea(localPos, ENCOUNTER_DECK_AREA) or inArea(localPos, ENCOUNTER_DISCARD_AREA) then
    Wait.frames(function() tokenSpawnTrackerApi.resetTokensSpawned(object.getGUID()) end, 1)
    removeTokensFromObject(object)
  end
end

-- TTS event handler. Handles scenario name event triggering
function onCollisionExit(collisionInfo)
  local object = collisionInfo.collision_object

  -- reset token metadata if scenario reference card is removed
  if object.getName() == "Scenario" then
    tokenData = {}
    useFrontData = nil
    fireTokenDataChangedEvent()
  end
end

-- Listens for cards entering the encounter deck or encounter discard, discards tokens on them,
-- and resets the spawn state for the cards when they do.
function onObjectEnterContainer(container, object)
  local localPos = self.positionToLocal(container.getPosition())
  if inArea(localPos, ENCOUNTER_DECK_AREA) or inArea(localPos, ENCOUNTER_DISCARD_AREA) then
    tokenSpawnTrackerApi.resetTokensSpawned(object.getGUID())
    removeTokensFromObject(object)
  end
end

-- fires if the scenario title changes
function fireScenarioChangedEvent()
  -- maybe show the title splash screen
  Wait.frames(function() Global.call('titleSplash', currentScenario) end, 20)

  -- set the scenario for the playarea (connections might be disabled)
  playAreaApi.onScenarioChanged(currentScenario)

  -- maybe update the playarea image
  local playAreaImageSelector = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaImageSelector")
  playAreaImageSelector.call("maybeUpdatePlayAreaImage", currentScenario)
end

-- fires if the scenario title or the difficulty changes
function fireTokenDataChangedEvent()
  local fullData = returnTokenData()
  tokenArrangerApi.onTokenDataChanged(fullData)
end

-- returns the chaos token metadata (if provided)
function returnTokenData()
  return {
    tokenData       = tokenData,
    currentScenario = currentScenario,
    useFrontData    = useFrontData
  }
end

---------------------------------------------------------
-- encounter card drawing
---------------------------------------------------------

-- gets the encounter deck (for internal functions and Api calls)
function getEncounterDeck()
  local searchResult = searchLib.atPosition(ENCOUNTER_DECK_POS, "isCardOrDeck")

  if #searchResult > 0 then
    return searchResult[1]
  end
end

-- 'params' contains the position, rotation and a boolean to force a faceup draw
function drawEncounterCard(params)
  local encounterDeck = getEncounterDeck()
  local reshuffledAlready

  if encounterDeck then
    reshuffledAlready = false
    if encounterDeck.type == "Deck" then
      actualEncounterCardDraw(encounterDeck.takeObject(), params)
    else
      actualEncounterCardDraw(encounterDeck, params)
    end
  else
    -- nothing here, time to reshuffle
    if reshuffledAlready == true then
      reshuffledAlready = false
      return
    end

    -- if there is no discard pile either, reshuffleEncounterDeck will give an error message already
    local success = reshuffleEncounterDeck()

    -- only continue if there was a discard pile
    if not success then return end
    reshuffledAlready = true
    drawEncounterCard(params)
  end
end

-- draw the provided card to the requesting playermat
function actualEncounterCardDraw(card, params)
  local metadata = JSON.decode(card.getGMNotes()) or {}
  local DATA_HELPER = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DataHelper")

  -- draw hidden cards facedown
  local faceUpRotation = 0
  if metadata.hidden or DATA_HELPER.call('checkHiddenCard', card.getName()) then
    faceUpRotation = 180
  end

  local rot = playermatApi.returnRotation(params.matColor):setAt("z", faceUpRotation)
  deckLib.placeOrMergeIntoDeck(card, params.position, rot)
end

-- gets the discard pile and shuffles it into the encounter deck
---@return boolean: Whether the operation was successfully performed
function reshuffleEncounterDeck()
  -- flag to avoid multiple calls
  if isReshuffling then
    return false
  end
  isReshuffling = true

  -- disable flag after 1s delay
  Wait.time(function() isReshuffling = false end, 1)

  local encounterDeck = getEncounterDeck()
  local discardPile = searchLib.atPosition(ENCOUNTER_DISCARD_POSITION, "isCardOrDeck")

  if #discardPile > 0 then
    local discardDeck = discardPile[1]

    -- flips discard pile
    if not discardDeck.is_face_down then
      discardDeck.setRotation({ 0, -90, 180 })
    end

    -- make a new encounter deck
    if encounterDeck == nil then
      discardDeck.setPosition(Vector(ENCOUNTER_DECK_POS) + Vector({ 0, 1, 0 }))
      encounterDeck = discardDeck
    else
      encounterDeck.putObject(discardDeck)
    end
    encounterDeck.shuffle()
    broadcastToAll("Shuffled encounter discard into deck.", "White")
    return true
  else
    broadcastToAll("Encounter discard pile is already empty.", "Red")
    return false
  end
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

-- Simple method to check if the given point is in a specified area
---@param point tts__Vector Point to check, only x and z values are relevant
---@param bounds table Defined area to see if the point is within
---@return boolean: True if the point is in the area defined by bounds
function inArea(point, bounds)
  return (point.x < bounds.upperLeft.x
    and point.x > bounds.lowerRight.x
    and point.z < bounds.upperLeft.z
    and point.z > bounds.lowerRight.z)
end

-- removes tokens from the provided card/deck
function removeTokensFromObject(object)
  local TRASH = guidReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  for _, obj in ipairs(searchLib.onObject(object)) do
    if obj.getGUID() ~= "4ee1f2" and -- table
        obj ~= self and
        obj.type ~= "Deck" and
        obj.type ~= "Card" and
        obj.memo ~= nil and
        obj.getLock() == false and
        not tokenChecker.isChaosToken(obj) then
      TRASH.putObject(obj)
    end
  end
end
