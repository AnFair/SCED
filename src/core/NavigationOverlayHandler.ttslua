local playmatApi    = require("playermat/PlaymatApi")
fullButtonData      = {
  { id = "1",  width = "84",  height = "33",  offset = "1 2" },       -- Act/Agenda
  { id = "2",  width = "78",  height = "69",  offset = "1 -62" },     -- Map
  { id = "3",  width = "70",  height = "36",  offset = "-38 -126" },  -- White
  { id = "4",  width = "70",  height = "36",  offset = "38 -126" },   -- Orange
  { id = "5",  width = "36",  height = "70",  offset = "-63 -66" },   -- Green
  { id = "6",  width = "36",  height = "70",  offset = "63 -66" },    -- Red
  { id = "7",  width = "38",  height = "38",  offset = "-65 -3" },    -- Victory
  { id = "8",  width = "40",  height = "40",  offset = "65 -3" },     -- Guide
  { id = "9",  width = "56",  height = "16",  offset = "1 -20" },     -- Player count
  { id = "10", width = "36",  height = "16",  offset = "1 -102" },    -- Bless/Curse
  { id = "11", width = "168", height = "56",  offset = "1 47" },      -- Scenarios
  { id = "12", width = "52",  height = "53",  offset = "-154 134" },  -- Player card panel
  { id = "13", width = "22",  height = "22",  offset = "-116 132" },  -- Search card panel
  { id = "14", width = "120", height = "75",  offset = "-152 70" },   -- Player card display
  { id = "15", width = "40",  height = "54",  offset = "-150 -38" },  -- Deck builder
  { id = "16", width = "104", height = "84",  offset = "-154 -114" }, -- Rules area
  { id = "17", width = "100", height = "170", offset = "152 72" },    -- Cycle area
  { id = "18", width = "56",  height = "60",  offset = "182 -124" },  -- Additions
  { id = "19", width = "20",  height = "20",  offset = "-8 150" },    -- Shrink
  { id = "20", width = "20",  height = "20",  offset = "12 150" }     -- Close
}

playButtonData      = {
  { id = "1",  width = "80", height = "33", offset = "0 55" },
  { id = "2",  width = "78", height = "70", offset = "0 -8" },
  { id = "3",  width = "68", height = "32", offset = "-36 -71" },
  { id = "4",  width = "68", height = "32", offset = "36 -71" },
  { id = "5",  width = "35", height = "66", offset = "-65 -10" },
  { id = "6",  width = "35", height = "66", offset = "65 -10" },
  { id = "7",  width = "38", height = "38", offset = "-66 52" },
  { id = "8",  width = "38", height = "38", offset = "66 52" },
  { id = "9",  width = "50", height = "12", offset = "0 33" },
  { id = "10", width = "32", height = "12", offset = "0 -48" },
  { id = "19", width = "20", height = "20", offset = "-10 80" },
  { id = "20", width = "20", height = "20", offset = "10 80" }
}

defaultCameraParams = {
  { position = { -1.6, 1.55, 0 },      distance = 18 }, --  1. ActAgenda
  { position = { -28, 1.55, 0.42 },    distance = -1 }, --  2. Map
  { position = { -31.6, 1.55, 26.4 },  distance = -1 }, --  3. Green playmat
  { position = { -55, 1.55, 12.05 },   distance = -1 }, --  4. White playmat
  { position = { -55, 1.55, -11.48 },  distance = -1 }, --  5. Orange playmat
  { position = { -31.6, 1.55, -26.4 }, distance = -1 }, --  6. Red playmat
  { position = { -3, 1.55, 30 },       distance = 16 }, --  7. Victory / SetAside
  { position = { -3, 1.55, -26.76 },   distance = 16 }, --  8. Guide
  { position = { -11.83, 1.55, 0 },    distance = 10 }, --  9. Player count
  { position = { -48.35, 1.55, 0 },    distance = 10 }, -- 10. Bless/Curse
  { position = { 12.56, 1.55, 0 },     distance = 45 }, -- 11. Scenarios
  { position = { 57.8, 1.55, 71 },     distance = 22 }, -- 12. Player card panel
  { position = { 60.38, 1.55, 56 },    distance = 10 }, -- 13. Card search panel
  { position = { 27.48, 1.55, 71 },    distance = 35 }, -- 14. Player card area
  { position = { -19.48, 1.55, 71 },   distance = 22 }, -- 15. Deck builder
  { position = { -52.92, 1.55, 71 },   distance = 42 }, -- 16. Rules area
  { position = { 26, 1.55, -71 },      distance = 65 }, -- 17. Cycle area
  { position = { -59.08, 1.55, -83 },  distance = 27 }  -- 18. Additions
}

local cameraParams   = { {}, {}, {}, {} }
local playermatData  = { {}, {}, {}, {} }
local editing        = false
local claiming       = false
local visibility     = {}
local claims         = {}

function onSave()
  return JSON.encode({
    cameras    = cameraParams,
    visibility = visibility,
    claims     = claims
  })
end

function onLoad(savedData)
  if savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    cameraParams     = loadedData.cameras
    visibility       = loadedData.visibility
    claims           = loadedData.claims
  else
    resetCameras()
    resetClaimColors()
  end

  updateOverlay()
end

function closeOverlay(_, color)
  setVisibility("close", color)
end

function cycleVisibility(color)
  setVisibility("next", color)
end

function setVisibility(type, color)
  local visibility[color] = { full = false, play = false }

  if type == "next" then
    if visibility[color].full then
      visibility[color] = { full = false, play = true }
    elseif visibility[color].play then
      visibility[color] = { full = false, play = false }
    else
      visibility[color] = { full = true, play = false }
    end
  end

  updateOverlay()
end

function getIndices(color)
  local playerCount = #getSeatedPlayers()

  if playerCount == 0 then
    return {}
  elseif playerCount == 1 then
    return { 1, 2, 3, 4 }
  else
    return { getIndexForPlayerColor(color) }
  end
end

function resetCameras()
  for v = 1, 4 do
    cameraParams[v] = {}
    for i = 1, #defaultCameraParams do
      cameraParams[v][i] = {}
      cameraParams[v][i].position = defaultCameraParams[i].position
      cameraParams[v][i].pitch = 75
      cameraParams[v][i].yaw = 90
      cameraParams[v][i].distance = defaultCameraParams[i].distance
    end
  end
end

function resizeOverlay(object, color)
  for _, v in ipairs(getIndices(color)) do
    if v > 0 then
      local full = fullVisibility[v]
      fullVisibility[v] = not full
      playVisibility[v] = full
    end
  end

  updateOverlay()
end

function updateOverlay()
  -- update XML visibility
  local fullColors, playColors
  for i, v in pairs(fullVisibility) do
    if v then
      local matColor = getPlayerColorForIndex(i)
      if fullColors and matColor ~= nil then
        fullColors = fullColors .. '|' .. matColor
      elseif matColor ~= nil then
        fullColors = matColor
      end
    end
  end

  for i, v in pairs(playVisibility) do
    if v then
      local matColor = getPlayerColorForIndex(i)
      if playColors and matColor ~= nil then
        playColors = playColors .. '|' .. matColor
      elseif matColor ~= nil then
        playColors = matColor
      end
    end
  end

  if fullColors then
    updateXMLbuttons("full")
    UI.setAttribute("navPanelFull", "visibility", fullColors)
    UI.show("navPanelFull")
  else
    UI.hide("navPanelFull")
  end

  if playColors then
    updateXMLbuttons("play")
    UI.setAttribute("navPanelPlay", "visibility", playColors)
    UI.show("navPanelPlay")
  else
    UI.hide("navPanelPlay")
  end
end

function updateXMLbuttons(type)
  local data, id, overlay, color
  if type == "full" then
    data = fullButtonData
    id = "navPanelFull"
    overlay = "OverlayLarge"
  else
    data = playButtonData
    id = "navPanelPlay"
    overlay = "OverlaySmall"
  end

  -- XML button creation
  local guid = self.getGUID()
  local ui = UI.getXmlTable()
  local xml = findTagWithId(ui, id)

  -- add basic image
  xml.children = { {
    tag = "image",
    attributes = {
      id    = "backgroundImage",
      image = overlay
    }
  } }

  -- add all buttons
  for _, d in ipairs(data) do
    local buttonID = tonumber(d.id)

    if editing and buttonID < 19 then
      if selectedEditButton < 0 then
        color = "rgba(1,1,1,1)"
      elseif buttonID == selectedEditButton then
        color = "rgba(0,1,0,1)"
      else
        color = "rgba(1,0,0,1)"
      end
    elseif claiming and buttonID < 19 then
      if buttonID >= 3 and buttonID <= 6 then
        color = "rgba(1,1,1,1)"
      else
        color = "rgba(1,0,0,1)"
      end
    else
      color = "rgba(0,1,0,0)"
    end

    table.insert(xml.children, {
      tag = "button",
      attributes = {
        onClick  = guid .. "/buttonClicked",
        id       = d.id,
        height   = d.height,
        width    = d.width,
        offsetXY = d.offset,
        color    = color
      }
    })
  end

  UI.setXmlTable(ui)
end

function findTagWithId(ui, id)
  for _, obj in ipairs(ui) do
    if obj.attributes and obj.attributes.id and obj.attributes.id == id then return obj end
    if obj.children then
      local result = findTagWithId(obj.children, id)
      if result then return result end
    end
  end
  return nil
end

-- handles all button clicks
function buttonClicked(player, _, idValue)
  local buttonID = tonumber(idValue)

  if buttonID == 19 then
    resizeOverlay(nil, player.color)
    return
  elseif buttonID == 20 then
    closeOverlay(nil, player.color)
    return
  end

  if editing then
    if selectedEditButton < 0 then
      selectedEditButton = buttonID
    else
      if buttonID == selectedEditButton and editDistance > 0 then
        for _, v in ipairs(getIndices(color)) do
          cameraParams[v][selectedEditButton].position = editPos
          cameraParams[v][selectedEditButton].pitch = editPitch
          cameraParams[v][selectedEditButton].yaw = editYaw
          cameraParams[v][selectedEditButton].distance = editDistance
        end
      end

      editing = false
      selectedEditButton = -1
    end

    updateOverlay()
  elseif claiming then
    if buttonID >= 3 and buttonID <= 6 then
      local colorID = buttonID - 2
      local playerIndex = getIndexForPlayerColor(player.color)

      -- if we haven't claimed it, break all earlier claims
      if playermatData[playerIndex].claims[colorID] == false then
        for i = 1, 4 do
          if i ~= colorID then
            playermatData[i].claims[colorID] = false
            playermatData[colorID].claims[i] = false
          end
        end
      end

      for i = 1, 4 do
        if playermatData[playerIndex].claims[i] then
          playermatData[i].claims[colorID] = true
          playermatData[colorID].claims[i] = true
        end
      end

      fullVisibility[colorID] = fullVisibility[playerIndex]
      playVisibility[colorID] = playVisibility[playerIndex]
    end

    claiming = false
    updateOverlay()
  else
    loadCamera(player, _, buttonID)
  end
end

function loadCamera(player, _, index)
  local playerColor = player.color
  local playerIndex = getIndexForPlayerColor(playerColor)

  -- only do map zooming if the camera hasn't been specially set by user
  if index == 2 and cameraParams[playerIndex][index].distance <= 0 then
    local zone = getObjectFromGUID("a2f932")
    local minX, minZ, maxX, maxZ = 100, 100, -100, -100

    for _, obj in pairs(zone.getObjects()) do
      if obj.type == 'Card' or obj.type == 'Infinite' then
        local bounds = obj.getBounds()
        local x1 = bounds['center'][1] - bounds['size'][1] / 2
        local x2 = bounds['center'][1] + bounds['size'][1] / 2
        local z1 = bounds['center'][3] - bounds['size'][3] / 2
        local z2 = bounds['center'][3] + bounds['size'][3] / 2

        minX = math.min(x1, minX)
        maxX = math.max(x2, maxX)
        minZ = math.min(z1, minZ)
        maxZ = math.max(z2, maxZ)
      end
    end

    player.lookAt({
      position = { (minX + maxX) / 2, 0, (minZ + maxZ) / 2 },
      pitch = 75,
      yaw = 90,
      distance = 0.96 * math.max(maxX - minX, (maxZ - minZ) / 1.6) + 5
    })
  elseif index >= 3 and index <= 6 then
    local newMatIndex = index - 2 -- mat index 1 - 4
    local newMatColor = getPlayerColorForIndex(newMatIndex)

    if newMatColor ~= nil and (#getSeatedPlayers() == 1 or playermatData[playerIndex].claims[newMatIndex]) then
      player.changeColor(newMatColor)
    end

    if cameraParams[newMatIndex][index].distance <= 0 then
      local divisor, minX, maxX, minZ, maxZ

      for _, v in pairs(playmatApi.searchPlaymat(newMatColor)) do
        local bounds = v.hit_object.getBounds()
        local x1 = bounds['center'][1] - bounds['size'][1] / 2
        local x2 = bounds['center'][1] + bounds['size'][1] / 2
        local z1 = bounds['center'][3] - bounds['size'][3] / 2
        local z2 = bounds['center'][3] + bounds['size'][3] / 2

        minX = math.min(x1, minX or x1)
        maxX = math.max(x2, maxX or x2)
        minZ = math.min(z1, minZ or z1)
        maxZ = math.max(z2, maxZ or z2)
      end

      -- White/Orange
      if index == 3 or index == 4 then
        divisor = {x = 1, z = 1.6 } -- screen ratio * 1.2 (for my macbook pro, no idea how to generalize this)
      -- Green/Red
      else
        divisor = {x = 1.6, z = 1}
      end

      -- need to wait if the player color changed
      Wait.frames(
        function() player.lookAt({
          position = { (minX + maxX) / 2, 0, (minZ + maxZ) / 2 },
          pitch = 75,
          yaw = playmatApi.returnRotation(newMatColor).y + 180,
          distance = 0.64 * math.max((maxX - minX) / divisor.x, (maxZ - minZ) / divisor.z) + 7
        })
      end, 2)
    else
      Wait.frames(function() player.lookAt(cameraParams[newMatIndex][index]) end, 2)
    end
  else
    player.lookAt(cameraParams[playerIndex][index])
  end
end

function beginSetCamera(object, color)
  editing = true
  updateOverlay()
end

-- TO-DO: update this
editPos            = { 0, 0, 0 }
editPitch          = 0
editYaw            = 0
editDistance       = 0
selectedEditButton = -1

function updateEditCamera(params)
  editPos = params[1]
  editPitch = params[2]
  editYaw = params[3]
  editDistance = params[4]
end

function beginClaimColor()
  claiming = true
  updateOverlay()
end

function resetClaimColors()
  for i = 1, 4 do
    for j = 1, 4 do
      playermatData[i].claims = {}
      playermatData[i].claims[j] = (i == j)
    end
  end
end

-- helper functions
function getPlayerColorForIndex(index)
  local color = { "White", "Orange", "Green", "Red" }
  return color[index]
end

function getIndexForPlayerColor(color)
  local index = { White = 1, Orange = 2, Green = 3, Red = 4 }

  if index[color] then
    return index[color]
  else
    return -1
  end
end
