local playmatApi    = require("playermat/PlaymatApi")

fullButtonData      = {
  { id = "1",  width = "84",  height = "33",  offset = "1 2" },       -- Act/Agenda
  { id = "2",  width = "78",  height = "69",  offset = "1 -62" },     -- Map
  { id = "3",  width = "70",  height = "36",  offset = "-38 -126" },  -- White
  { id = "4",  width = "70",  height = "36",  offset = "38 -126" },   -- Orange
  { id = "5",  width = "36",  height = "70",  offset = "-63 -66" },   -- Green
  { id = "6",  width = "36",  height = "70",  offset = "63 -66" },    -- Red
  { id = "7",  width = "38",  height = "38",  offset = "-65 -3" },    -- Victory
  { id = "8",  width = "40",  height = "40",  offset = "65 -3" },     -- Guide
  { id = "9",  width = "56",  height = "16",  offset = "1 -20" },     -- Player count
  { id = "10", width = "36",  height = "16",  offset = "1 -102" },    -- Bless/Curse
  { id = "11", width = "168", height = "56",  offset = "1 47" },      -- Scenarios
  { id = "12", width = "52",  height = "53",  offset = "-154 134" },  -- Player card panel
  { id = "13", width = "22",  height = "22",  offset = "-116 132" },  -- Search card panel
  { id = "14", width = "120", height = "75",  offset = "-152 70" },   -- Player card display
  { id = "15", width = "40",  height = "54",  offset = "-150 -38" },  -- Deck builder
  { id = "16", width = "104", height = "84",  offset = "-154 -114" }, -- Rules area
  { id = "17", width = "100", height = "170", offset = "152 72" },    -- Cycle area
  { id = "18", width = "56",  height = "60",  offset = "182 -124" },  -- Additions
  { id = "19", width = "20",  height = "20",  offset = "-8 150" },    -- Shrink
  { id = "20", width = "20",  height = "20",  offset = "12 150" }     -- Close
}

playButtonData      = {
  { id = "1",  width = "80", height = "33", offset = "0 55" },
  { id = "2",  width = "78", height = "70", offset = "0 -8" },
  { id = "3",  width = "68", height = "32", offset = "-36 -71" },
  { id = "4",  width = "68", height = "32", offset = "36 -71" },
  { id = "5",  width = "35", height = "66", offset = "-65 -10" },
  { id = "6",  width = "35", height = "66", offset = "65 -10" },
  { id = "7",  width = "38", height = "38", offset = "-66 52" },
  { id = "8",  width = "38", height = "38", offset = "66 52" },
  { id = "9",  width = "50", height = "12", offset = "0 33" },
  { id = "10", width = "32", height = "12", offset = "0 -48" },
  { id = "19", width = "20", height = "20", offset = "-10 80" },
  { id = "20", width = "20", height = "20", offset = "10 80" }
}

defaultCameraParams = {
  { position = { -1.6, 1.55, 0 },      distance = 18 }, --  1. ActAgenda
  { position = { -28, 1.55, 0.42 },    distance = -1 }, --  2. Map
  { position = { -31.6, 1.55, 26.4 },  distance = -1 }, --  3. Green playmat
  { position = { -55, 1.55, 12.05 },   distance = -1 }, --  4. White playmat
  { position = { -55, 1.55, -11.48 },  distance = -1 }, --  5. Orange playmat
  { position = { -31.6, 1.55, -26.4 }, distance = -1 }, --  6. Red playmat
  { position = { -3, 1.55, 30 },       distance = 16 }, --  7. Victory / SetAside
  { position = { -3, 1.55, -26.76 },   distance = 16 }, --  8. Guide
  { position = { -11.83, 1.55, 0 },    distance = 10 }, --  9. Player count
  { position = { -48.35, 1.55, 0 },    distance = 10 }, -- 10. Bless/Curse
  { position = { 12.56, 1.55, 0 },     distance = 45 }, -- 11. Scenarios
  { position = { 57.8, 1.55, 71 },     distance = 22 }, -- 12. Player card panel
  { position = { 60.38, 1.55, 56 },    distance = 10 }, -- 13. Card search panel
  { position = { 27.48, 1.55, 71 },    distance = 35 }, -- 14. Player card area
  { position = { -19.48, 1.55, 71 },   distance = 22 }, -- 15. Deck builder
  { position = { -52.92, 1.55, 71 },   distance = 42 }, -- 16. Rules area
  { position = { 26, 1.55, -71 },      distance = 65 }, -- 17. Cycle area
  { position = { -59.08, 1.55, -83 },  distance = 27 }  -- 18. Additions
}

local editing        = false
local claiming       = false
local cameraParams   = {}
local visibility     = {}
local claims         = {}

---------------------------------------------------------
-- save/load functionality
---------------------------------------------------------

function onSave()
  return JSON.encode({
    cameras    = cameraParams,
    visibility = visibility,
    claims     = claims
  })
end

function onLoad(savedData)
  if savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    cameraParams     = loadedData.cameras
    visibility       = loadedData.visibility
    claims           = loadedData.claims
  else
    resetCameras()
    resetClaimColors()
    resetVisibility()
  end

  updateXmlButtons()
  updateVisibility()
end

---------------------------------------------------------
-- visibility related functions
---------------------------------------------------------

function cycleVisibility(color)
  setVisibility("next", color)
end

function copyVisibility(params)
  visibility[params.targetColor] = {
    full = visibility[params.startColor].full,
    play = visibility[params.startColor].play
  }
  updateVisibility()
end

function setVisibility(type, color)
  if type == "next" then
    if visibility[color].full then
      visibility[color] = { full = false, play = true }
    elseif visibility[color].play then
      visibility[color] = { full = false, play = false }
    else
      visibility[color] = { full = true, play = false }
    end
  elseif type == "toggle" then
    visibility[color] = {
      full = not visibility[color].full,
      play = not visibility[color].play
    }
  else
    visibility[color] = { full = false, play = false }
  end

  updateVisibility()
end

-- update XML visibility
function updateVisibility()
  local colorString = {full = "", play = ""}

  for color, v in pairs(visibility) do
    if v.full then
      if colorString.full == "" then
        colorString.full = color
      else
        colorString.full = colorString.full .. '|' .. color
      end
    elseif v.play then
      if colorString.play == "" then
        colorString.play = color
      else
        colorString.play = colorString.play .. '|' .. color
      end
    end
  end

  -- update the visibility on the XML
  UI.setAttribute("navPanelFull", "visibility", colorString.full)
  UI.setAttribute("navPanelPlay", "visibility", colorString.play)
  UI.setAttribute("navPanelFull", "active", colorString.full ~= "")
  UI.setAttribute("navPanelPlay", "active", colorString.play ~= "")
end

---------------------------------------------------------
-- XML creating/editing
---------------------------------------------------------

function updateXmlButtons()
  local ui = UI.getXmlTable()
  ui = updateXmlButtonHelper(ui, {
    data = fullButtonData,
    id = "navPanelFull",
    overlay = "OverlayLarge"
  })
  ui = updateXmlButtonHelper(ui, {
    data = playButtonData,
    id = "navPanelPlay",
    overlay = "OverlaySmall"
  })
  UI.setXmlTable(ui)
end

-- XML button creation
function updateXmlButtonHelper(ui, params)
  local color
  local guid = self.getGUID()
  local xml = findTagWithId(ui, params.id)

  -- add basic image
  xml.children = { {
    tag = "image",
    attributes = {
      id    = "backgroundImage",
      image = params.overlay
    }
  } }

  -- add all buttons
  for _, d in ipairs(params.data) do
    local buttonID = tonumber(d.id)

    if editing and buttonID < 19 then
      if selectedEditButton < 0 then
        color = "rgba(1,1,1,1)"
      elseif buttonID == selectedEditButton then
        color = "rgba(0,1,0,1)"
      else
        color = "rgba(1,0,0,1)"
      end
    elseif claiming and buttonID < 19 then
      if buttonID >= 3 and buttonID <= 6 then
        color = "rgba(1,1,1,1)"
      else
        color = "rgba(1,0,0,1)"
      end
    else
      color = "rgba(0,1,0,0)"
    end

    table.insert(xml.children, {
      tag = "button",
      attributes = {
        onClick  = guid .. "/buttonClicked",
        id       = d.id,
        height   = d.height,
        width    = d.width,
        offsetXY = d.offset,
        color    = color
      }
    })
  end
  return ui
end

function findTagWithId(ui, id)
  for _, obj in ipairs(ui) do
    if obj.attributes and obj.attributes.id and obj.attributes.id == id then return obj end
    if obj.children then
      local result = findTagWithId(obj.children, id)
      if result then return result end
    end
  end
  return nil
end

---------------------------------------------------------
-- core functionality
---------------------------------------------------------

-- handles all button clicks
function buttonClicked(player, _, idValue)
  local index = tonumber(idValue)

  if index == 19 then
    setVisibility("toggle", player.color)
    return
  elseif index == 20 then
    setVisibility("close", player.color)
    return
  end

  loadCamera(player, _, index)
end

function loadCamera(player, _, index)
  local lookHere

  -- only do map zooming if the camera hasn't been specially set by user
  if index == 2 and cameraParams[player.color][index].distance <= 0 then
    local zone = getObjectFromGUID("a2f932")
    local minX, minZ, maxX, maxZ = 100, 100, -100, -100

    for _, obj in pairs(zone.getObjects()) do
      if obj.type == 'Card' or obj.type == 'Infinite' then
        local bounds = obj.getBounds()
        local x1 = bounds['center'][1] - bounds['size'][1] / 2
        local x2 = bounds['center'][1] + bounds['size'][1] / 2
        local z1 = bounds['center'][3] - bounds['size'][3] / 2
        local z2 = bounds['center'][3] + bounds['size'][3] / 2

        minX = math.min(x1, minX)
        maxX = math.max(x2, maxX)
        minZ = math.min(z1, minZ)
        maxZ = math.max(z2, maxZ)
      end
    end

    lookHere = {
      position = { (minX + maxX) / 2, 0, (minZ + maxZ) / 2 },
      pitch = 75,
      yaw = 90,
      distance = 0.96 * math.max(maxX - minX, (maxZ - minZ) / 1.6) + 5
    }
  elseif index >= 3 and index <= 6 then
    local colorList = { "White", "Orange", "Green", "Red" }
    local newMatColor = colorList[index - 2] -- mat index 1 - 4
    local newPlayerColor = playmatApi.getPlayerColor(newMatColor)

    if newMatColor ~= nil and (#getSeatedPlayers() == 1 or claims[player.color][newMatColor]) then
      copyVisibility({startColor = player.color, targetColor = newPlayerColor})
      player.changeColor(newPlayerColor)
    end

    if cameraParams[player.color][index].distance <= 0 then
      local minX, maxX, minZ, maxZ

      for _, v in pairs(playmatApi.searchPlaymat(newMatColor)) do
        local bounds = v.hit_object.getBounds()
        local x1 = bounds['center'][1] - bounds['size'][1] / 2
        local x2 = bounds['center'][1] + bounds['size'][1] / 2
        local z1 = bounds['center'][3] - bounds['size'][3] / 2
        local z2 = bounds['center'][3] + bounds['size'][3] / 2

        minX = math.min(x1, minX or x1)
        maxX = math.max(x2, maxX or x2)
        minZ = math.min(z1, minZ or z1)
        maxZ = math.max(z2, maxZ or z2)
      end

      lookHere = {
        position = { (minX + maxX) / 2, 0, (minZ + maxZ) / 2 },
        pitch = 75,
        yaw = playmatApi.returnRotation(newMatColor).y + 180,
        distance = 0.42 * math.max(maxX - minX, maxZ - minZ) + 7
      }
    end
  end
  -- delay is to account for colorswap
  Wait.frames(function() player.lookAt(lookHere or cameraParams[player.color][index]) end, 2)
end

function beginClaimColor()
  claiming = true
  updateXmlButtons()
end

function beginSetCamera()
  editing = true
  updateXmlButtons()
end

-- TO-DO: update this
editPos            = { 0, 0, 0 }
editPitch          = 0
editYaw            = 0
editDistance       = 0
selectedEditButton = -1

function updateEditCamera(params)
  editPos = params[1]
  editPitch = params[2]
  editYaw = params[3]
  editDistance = params[4]
end

---------------------------------------------------------
-- functions to reset/initialize tables
---------------------------------------------------------

function resetCameras()
  for _, color in ipairs(Player.getColors()) do
    cameraParams[color] = {}
    for i = 1, #defaultCameraParams do
      cameraParams[color][i] = {}
      cameraParams[color][i].yaw = 90
      cameraParams[color][i].pitch = 75
      cameraParams[color][i].position = defaultCameraParams[i].position
      cameraParams[color][i].distance = defaultCameraParams[i].distance
    end
  end
end

function resetClaimColors()
  for _, seatedColor in ipairs(getSeatedPlayers()) do
    claims[seatedColor] = {}
    for _, color in ipairs(Player.getColors()) do
      claims[seatedColor][color] = (seatedColor == color)
    end
  end
end

function resetVisibility()
  for _, color in ipairs(Player.getColors()) do
    visibility[color] = { full = false, play = false }
  end
end
