local messageSent = {}

function onLoad()
  local buttonParameters          = {}
  buttonParameters.label          = "0"
  buttonParameters.click_function = "none"
  buttonParameters.function_owner = self
  buttonParameters.scale          = { 0.15, 0.15, 0.15 }
  buttonParameters.width          = 0
  buttonParameters.height         = 0
  buttonParameters.font_size      = 600
  buttonParameters.font_color     = { 1, 1, 1 }

  -- index 0: VP - "Display"
  buttonParameters.position = { x = -0.71, y = 0.06, z = -0.69 }
  self.createButton(buttonParameters)

  -- index 1: VP - "Play Area"
  buttonParameters.position = { x = 0.65, y = 0.06, z = -0.69 }
  self.createButton(buttonParameters)

  -- index 2: VP - "Total"
  buttonParameters.position = { x = 1.685, y = 0.06, z = -0.69 }
  self.createButton(buttonParameters)

  -- index 3: refresh button
  buttonParameters.position       = { x = 1.55, y = 0.06, z = -1.25 }
  buttonParameters.label          = "Refresh!"
  buttonParameters.click_function = "updateCount"
  buttonParameters.width          = 2200
  buttonParameters.height         = 720
  buttonParameters.font_color     = { 0, 0, 0 }
  buttonParameters.font_size      = 540
  self.createButton(buttonParameters)

  -- update the display label once
  Wait.time(updateCount, 1)
end

-- automatically update when cards are dropped or removed
function onCollisionEnter() updateCount() end
function onCollisionExit() Wait.time(updateCount, 0.1) end

function updateCount()
  local victoryPoints = {
    display = 0,
    playArea = 0
  }

  -- count cards in victory display
  for _, v in ipairs(searchOnObj(self)) do
    local obj = v.hit_object
    local cardVP = 0

    -- check metadata for VP
    if obj.tag == "Card" then
      cardVP = getCardVP(obj.is_face_down, JSON.decode(obj.getGMNotes()))
      victoryPoints.display = victoryPoints.display + AddOrSendMessage(cardVP, obj.getName())

      -- handling for stacked cards
    elseif obj.tag == "Deck" then
      for _, deepObj in ipairs(obj.getObjects()) do
        cardVP = getCardVP(true, JSON.decode(deepObj.gm_notes))
        victoryPoints.display = victoryPoints.display + AddOrSendMessage(cardVP, deepObj.nickname)
      end
    end
  end

  -- count locations in playArea
  local playArea = getObjectFromGUID("721ba2")
  for _, v in ipairs(searchOnObj(playArea)) do
    local obj = v.hit_object
    local cardVP = 0

    if obj.hasTag("Location") then
      cardVP = getCardVP(obj.is_face_down, JSON.decode(obj.getGMNotes())) or 0
      if cardVP and not cardHasClues(obj) then
        victoryPoints.playArea = victoryPoints.playArea + cardVP
      end
    end
  end

  self.editButton({
    index = 0,
    label = victoryPoints.display
  })

  self.editButton({
    index = 1,
    label = victoryPoints.playArea
  })

  self.editButton({
    index = 2,
    label = victoryPoints.display + victoryPoints.playArea
  })
end

function AddOrSendMessage(addition, name)
  if tonumber(addition) ~= nil then
    return tonumber(addition)
  elseif not tableContains(messageSent, name) then
    printToAll("No VP counted for '" .. name .. "'.", "White")
    table.insert(messageSent, name)
  end
  return 0
end

-- checks if a card has clues on it
function cardHasClues(card)
  for _, v in ipairs(searchOnObj(card)) do
    local obj = v.hit_object
    if obj.tag == "Tile" then
      local props = obj.getCustomObject()
      if obj.is_face_down == false and
          props.image == "http://cloud-3.steamusercontent.com/ugc/1758068501357164917/1D06F1DC4D6888B6F57124BD2AFE20D0B0DA15A8/" and
          props.image_bottom == "https://i.imgur.com/EoL7yaZ.png" then
        return true
      end
    end
  end
  return false
end

-- gets the VP count from the notes
function getCardVP(faceDown, notes)
  local cardVP
  if notes ~= nil then
    -- enemy, treachery etc.
    cardVP = tonumber(notes.victory)

    -- location
    if not cardVP then
      if not faceDown and notes.locationFront ~= nil then
        cardVP = tonumber(notes.locationFront.victory)
      elseif notes.locationBack ~= nil then
        cardVP = tonumber(notes.locationBack.victory)
      end
    end
  end
  return cardVP
end

function searchOnObj(obj)
  return Physics.cast({
    direction    = { 0, 1, 0 },
    max_distance = 0.5,
    type         = 3,
    size         = obj.getBounds().size,
    origin       = obj.getPosition()
  })
end

-- search a table for a value, return true if found (else returns false)
function tableContains(table, value)
  for _, v in ipairs(table) do
    if v == value then
      return true
    end
  end
  return false
end
