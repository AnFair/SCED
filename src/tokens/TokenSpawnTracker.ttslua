local spawnedCardGuids = {}

function updateSave()
  self.script_state = JSON.encode({ cards = spawnedCardGuids })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData) or {}
    spawnedCardGuids = loadedData.cards or {}
  end

  -- context menu entries
  self.addContextMenuItem("Reset All", resetAll)
  self.addContextMenuItem("Reset Locations", resetAllLocations)
  self.addContextMenuItem("Reset Player Cards", resetAllAssetAndEvents)
end

function convertToGuid(objOrGuid)
  if type(objOrGuid) == "string" then
    return objOrGuid
  else
    return objOrGuid.getGUID()
  end
end

function hasSpawnedTokens(objOrGuid)
  return spawnedCardGuids[convertToGuid(objOrGuid)] == true
end

function markTokensSpawned(objOrGuid)
  spawnedCardGuids[convertToGuid(objOrGuid)] = true
  updateSave()
end

function resetTokensSpawned(objOrGuid)
  spawnedCardGuids[convertToGuid(objOrGuid)] = nil
  updateSave()
end

function resetAll()
  spawnedCardGuids = {}
  updateSave()
end

function resetAllLocations() resetSpecificTypes("Location") end

function resetAllAssetAndEvents() resetSpecificTypes("Asset", "Event") end

function resetSpecificTypes(type1, type2)
  local resetList = {}
  for cardGuid, _ in pairs(spawnedCardGuids) do
    local card = getObjectFromGUID(cardGuid)
    if card ~= nil then
      local cardMetadata = JSON.decode(card.getGMNotes()) or {}
      -- Check this by type rather than the PlayerCard tag so we don't reset weaknesses
      if cardMetadata.type == type1 or cardMetadata.type == type2 then
        resetList[cardGuid] = true
      end
    end
  end
  for cardGuid, _ in pairs(resetList) do
    spawnedCardGuids[cardGuid] = nil
    updateSave()
  end
end

-- Listener to reset card token spawns when they enter a hand.
function onObjectEnterZone(zone, enterObject)
  if zone.type == "Hand" and enterObject.type == "Card" then
    resetTokensSpawned(enterObject)
  end
end
