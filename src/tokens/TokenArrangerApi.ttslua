do
  local TokenArrangerApi = {}
  local GUIDReferenceApi = require("core/GUIDReferenceApi")

  -- local function to call the token arranger, if it is on the table
  ---@param functionName string Name of the function to call
  ---@param argument? table Parameter to pass
  local function callIfExistent(functionName, argument)
    local tokenArranger = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "TokenArranger")
    if tokenArranger ~= nil then
      return tokenArranger.call(functionName, argument)
    end
  end

  -- updates the token modifiers with the provided data
  ---@param fullData table Contains the chaos token metadata
  function TokenArrangerApi.onTokenDataChanged(fullData)
    callIfExistent("onTokenDataChanged", fullData)
  end

  -- deletes already laid out tokens
  function TokenArrangerApi.deleteCopiedTokens()
    callIfExistent("deleteCopiedTokens")
  end

  -- updates the laid out tokens
  function TokenArrangerApi.layout()
    Wait.time(function() callIfExistent("layout") end, 0.1)
  end

  -- get modifier (or precedence value) of specified token
  function TokenArrangerApi.getCurrentModifier(tokenName)
    return callIfExistent("getCurrentModifier", tokenName)
  end

  return TokenArrangerApi
end
