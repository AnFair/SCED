do
  local TokenArrangerApi = {}
  local GUIDReferenceApi = require("core/GUIDReferenceApi")

  -- internal function to create a copy of the table to avoid operating on variables owned by different objects
  local function deepCopy(data)
    if type(data) ~= "table" then return data end
    local copiedList = {}
    for key, value in pairs(data) do
      if type(value) == "table" then
        copiedList[key] = deepCopy(value)
      else
        copiedList[key] = value
      end
    end
    return copiedList
  end

  -- local function to call the token arranger, if it is on the table
  ---@param functionName string Name of the function to call
  ---@param argument? table Parameter to pass
  local function callIfExistent(functionName, argument)
    local tokenArranger = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "TokenArranger")
    if tokenArranger ~= nil then
      return tokenArranger.call(functionName, argument)
    end
  end

  -- updates the token modifiers with the provided data
  ---@param fullData table Contains the chaos token metadata
  function TokenArrangerApi.onTokenDataChanged(fullData)
    callIfExistent("onTokenDataChanged", fullData)
  end

  -- deletes already laid out tokens
  function TokenArrangerApi.deleteCopiedTokens()
    callIfExistent("deleteCopiedTokens")
  end

  -- updates the laid out tokens
  function TokenArrangerApi.layout()
    Wait.time(function() callIfExistent("layout") end, 0.1)
  end

  -- returns the save data
  function TokenArrangerApi.getSaveData()
    return deepCopy(callIfExistent("getSaveData"))
  end

  -- loads save data
  function TokenArrangerApi.loadData(loadedData)
    callIfExistent("loadData", loadedData)
  end

  -- get modifier (or precedence value) of specified token
  function TokenArrangerApi.getCurrentModifier(tokenName)
    return callIfExistent("getCurrentModifier", tokenName)
  end

  return TokenArrangerApi
end
