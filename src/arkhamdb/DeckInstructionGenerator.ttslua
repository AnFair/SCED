local searchLib = require("util/SearchLib")

local idList = {}

function onLoad()
  -- "generate" button
  local buttonParameters          = {}
  buttonParameters.function_owner = self
  buttonParameters.height         = 200
  buttonParameters.width          = 800
  buttonParameters.click_function = "generate"
  buttonParameters.color          = { 0, 0, 0, 0 }
  buttonParameters.position       = { 0, 0.11, 0.74 }
  buttonParameters.scale          = { 0.5, 1, 0.5 }
  self.createButton(buttonParameters)
end

-- generates a string for the deck notes that will instruct the Deck Importer to add the specified cards
function generate(_, playerColor)
  idList = {}
  for _, obj in ipairs(searchLib.onObject(self, "isCardOrDeck")) do
    if obj.type == "Card" then
      processCard(obj.getGMNotes(), obj.getName(), playerColor)
    elseif obj.type == "Deck" then
      for _, deepObj in ipairs(obj.getData().ContainedObjects) do
        processCard(deepObj.GMNotes, deepObj.Nickname, playerColor)
      end
    end
  end

  if #idList == 0 then
    broadcastToColor("Didn't find any valid cards.", playerColor, "Red")
    return
  else
    local cardString = #idList .. " cards"
    if #idList == 1 then
      cardString = " 1 card"
    end
    broadcastToColor("Parsed " .. cardString .. ": Go to Notebook > Deck Instructions", playerColor, "Green")
  end

  -- sort the idList
  table.sort(idList, sortById)

  -- construct the string (new line for each instruction)
  local description = "++SCED import instructions++"
  for _, entry in ipairs(idList) do
    description = description .. "\n- add: " .. entry.id .. " (**" .. entry.name .. "**)"
  end

  -- get a timestamp
  local timestamp = os.date("%Y-%m-%d %H:%M")

  -- get notebook data
  for _, nb in ipairs(Notes.getNotebookTabs()) do
    if nb.title == "Deck Instructions" then
      -- edit the existing tab
      Notes.editNotebookTab({
        index = nb.index,
        body = nb.body .. "\n\n" .. timestamp .. "\n" .. description,
      })
      return
    end
  end

  -- add a new notebook tab for it (since there was no existing tab)
  Notes.addNotebookTab({
    title = "Deck Instructions",
    body =
        "Make sure to copy the section beginning with '++SCED import instructions++' to your ArkhamDB / arkham.build deck description." ..
        "\nAfter doing so, the Deck Importer will be able to spawn these cards IF they are added to the mods card index (for example by " ..
        "throwing them into the 'Additional Cards Bag'.\nIt also supports '- remove:' instructions to automatically remove placeholder cards.\n\n" ..
        timestamp .. "\n" .. description
  })
end

-- use the ZoopGuid as fallback if no id present
function getIdFromData(metadata)
  if metadata.id then
    return metadata.id
  elseif metadata.TtsZoopGuid then
    return metadata.TtsZoopGuid
  end
end

function processCard(notes, name, playerColor)
  local id = getIdFromData(JSON.decode(notes) or {})
  if id then
    table.insert(idList, { id = id, name = name })
  else
    broadcastToColor("Couldn't get ID for " .. name .. ".", playerColor, "Red")
  end
end

function sortById(a, b)
  local numA = tonumber(a.id)
  local numB = tonumber(b.id)

  if numA and numB then
    return numA < numB
  else
    return a.name < b.name
  end
end
