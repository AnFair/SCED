require("core/Constants")
require("playercards/PlayerCardSpawner")

local cardIdIndex  = {}
local objectIdIndex = {}
local indexingDone = false

function onLoad()
  self.addContextMenuItem("Rebuild Index", rebuildIndex)
  Wait.frames(startIndexBuild, 30)
end

function rebuildIndex()
  if indexingDone then
    print("Rebuilding Encounter Card index")
    startIndexBuild()
  end
end

function startIndexBuild()
  indexingDone = false
  cardIdIndex  = {}
  objectIdIndex = {}
  startLuaCoroutine(self, "buildIndex")
end

function buildIndex()
  itemCount = 0
  indexCount = 0

  -- index contents
  local selfData = self.getData()
  if selfData.ContainedObjects then
    processContainedObjects(selfData.ContainedObjects)
  end

  -- index hotfix bags
  for _, hotfixBag in ipairs(getObjectsWithTag("AllEncounterCardsHotfix")) do
    local hotfixData = hotfixBag.getData()
    if hotfixData.ContainedObjects then
      processContainedObjects(hotfixData.ContainedObjects, hotfixData.CustomDeck)
    end
  end

  indexingDone = true
  return 1
end

-- TODO: unify this with the AllCardsBag
-- Processes the contained objects for cards to add to the index
function processContainedObjects(containedObjects, customDeck)
  for _, objData in ipairs(containedObjects) do
    if objData.ContainedObjects then
      -- recursively process nested containers
      processContainedObjects(objData.ContainedObjects, objData.CustomDeck)
    elseif objData.Name == "Card" or objData.Name == "CardCustom" then
      if customDeck then
        -- we might need to fix the "CustomDeck" entry for cards inside decks since TTS doesn't update it while they are in bags
        local wantedCustomDeckIdStr = tostring(objData.CardID):sub(1, -3)
        local presentCustomDeckIdNum = next(objData.CustomDeck)

        -- type conversion (TTS seems to store these as strings, but reads them as numbers)
        local wantedCustomDeckIdNum = tonumber(wantedCustomDeckIdStr)
        if wantedCustomDeckIdNum ~= presentCustomDeckIdNum then
          if customDeck[wantedCustomDeckIdNum] then
            objData.CustomDeck = {}
            objData.CustomDeck[wantedCustomDeckIdStr] = customDeck[wantedCustomDeckIdNum]
            log("Corrected CustomDeckData for " .. objData.Nickname)
          else
            log("Could not correct CustomDeckData for " .. objData.Nickname)
            return
          end
        end
      end
      addCardToIndex(objData)
      itemCount = itemCount + 1
    elseif objData.GMNotes and objData.GMNotes ~= "" then
      addObjectToIndex(objData)
      itemCount = itemCount + 1
    end

    if itemCount > 19 then
      itemCount = 0
      coroutine.yield(0)
    end
  end
end

function addCardToIndex(cardData)
  local cardMetadata

  if cardData.GMNotes and cardData.GMNotes ~= "" then
    cardMetadata = parseObjectMetadata(cardData)
  end

  if cardMetadata then
    -- use the ZoopGuid as fallback if no id present
    cardMetadata.id = cardMetadata.id or cardMetadata.TtsZoopGuid
    cardIdIndex[cardMetadata.id] = { data = cardData, metadata = cardMetadata }
  else
    -- assume name is the ID as fallback
    local length = string.len(cardData["Nickname"])
    if length == 5 or length == 6 then
      local cardId = cardData["Nickname"]
      cardData["Nickname"] = nil
      cardIdIndex[cardId] = { data = cardData, metadata = { id = cardId } }
    end
  end
  indexCount = indexCount + 1
end

function addObjectToIndex(objectData)
  local objectMetadata

  if objectData.GMNotes and objectData.GMNotes ~= "" then
    objectMetadata = parseObjectMetadata(objectData)
  end

  if objectMetadata then
    objectIdIndex[objectMetadata.id] = { data = objectData, metadata = objectMetadata }
  end
  indexCount = indexCount + 1
end

function parseObjectMetadata(objectData)
  -- using the more efficient 'json.parse()' to speed this process up
  local status, objectMetadata = pcall(function() return json.parse(objectData.GMNotes) end)

  -- if an error happens, fallback to the regular parser
  if status ~= true or objectMetadata == nil then
    log("Fast parser failed for " .. objectData.Nickname .. ", using old parser instead.")
    objectMetadata = JSON.decode(objectData.GMNotes)
  end

  return objectMetadata
end

function isIndexReady()
  if not indexingDone then
    broadcastToAll("Still loading cards, please try again in a few seconds", { 0.9, 0.2, 0.2 })
  end
  return indexingDone
end

function getCardById(params)
  if not isIndexReady() then return {} end
  return cardIdIndex[params.id]
end

function getObjectById(params)
  if not isIndexReady() then return {} end
  return objectIdIndex[params.id]
end

function onObjectEnterContainer(container)
  if container ~= self then return end
  delayedIndexUpdate()
end

function onObjectLeaveContainer(container)
  if container ~= self then return end
  delayedIndexUpdate()
end

-- updates the index if there weren't changes for a specified amount of time
function delayedIndexUpdate()
  if waitId then
    Wait.stop(waitId)
  end
  waitId = Wait.time(rebuildIndex, 2)
end

-- attempt to replace cards / decks
function onObjectSpawn(obj)
  if indexCount == 0 then return end
  if obj.hasTag("Replaced") then return end

  if obj.type == "Deck" then
    handleSpawnedDeck(obj)
  elseif obj.type == "Bag" then
    handleSpawnedBag(obj)
  else
    handleSpawnedItem(obj)
  end
end

function handleSpawnedBag(bag)
  Wait.time(function()
    if bag ~= nil then
      bag.addTag("Replaced")
      local objData = bag.getData()
      if updateBagData(objData) then
        bag.destruct()
        spawnObjectData({ data = objData })
      end
    end
  end, 1)
end

function handleSpawnedDeck(deck)
  Wait.time(function()
    if deck ~= nil then
      deck.addTag("Replaced")
      local objData = deck.getData()
      if updateDeckData(objData) then
        deck.destruct()
        spawnObjectData({ data = objData })
      end
    end
  end, 1)
end

function handleSpawnedItem(item)
  -- check if the item has metadata
  local md = JSON.decode(item.getGMNotes()) or {}
  if not md.id then return end

  -- check if it's in the index
  local itemData
  if item.type == "Card" then
    itemData = getCardById({ id = md.id })
  else
    itemData = getObjectById({ id = md.id })
  end
  if itemData == nil then return end

    Wait.time(function()
    if item ~= nil then
      local objData = item.getData()
      if updateOriginalItemData(objData, itemData.data) then
        local pos = item.getPosition()
        local rot = item.getRotation()
        local itemList = { { data = objData, metadata = md } }
        item.destruct()
        if item.type == "Card" then
          Spawner.spawnCards(itemList, pos, rot, false)
        else
          spawnObjectData({
            data = objData,
            position = pos,
            rotation = rot,
            callback_function = nil
          })
        end
      end
    end
  end, 1)
end

function updateBagData(bagData)
  local changedSomething = false
  for _, objData in ipairs(bagData.ContainedObjects or {}) do
    if objData.Name == "Bag" or objData.Name == "Custom_Model_Bag" then
      if updateBagData(objData) then
        changedSomething = true
      end
    elseif objData.Name == "Card" then
      local md = JSON.decode(objData.GMNotes) or {}
      if md.id then
        local cardData = getCardById({ id = md.id })
        if cardData then
          if updateOriginalItemData(objData, cardData.data) then
            changedSomething = true
          end
        end
      end
    elseif objData.Name == "Deck" then
      objData.Tags = objData.Tags or {}
      table.insert(objData.Tags, "Replaced")
      if updateDeckData(objData) then
        changedSomething = true
      end
    end
  end
  return changedSomething
end

function updateDeckData(deckData)
  local changedSomething = false
  local cardIdConversion = {}
  local newDeckData      = {}
  for _, objData in ipairs(deckData.ContainedObjects) do
    local md = JSON.decode(objData["GMNotes"]) or {}
    if md.id then
      local cardData = getCardById({ id = md.id })
      if cardData then
        local originalId = objData["CardID"]
        local state = updateOriginalItemData(objData, cardData.data)
        if state then
          changedSomething                   = true

          -- store changed card IDs / new deck data
          cardIdConversion[originalId]       = cardData.data["CardID"]
          local customDeckId, customDeckData = next(cardData.data["CustomDeck"])
          newDeckData[customDeckId]          = customDeckData
        end
      end
    end
  end

  if changedSomething then
    -- update deck data with changes
    local newDeckIds = {}
    for _, id in pairs(deckData["DeckIDs"]) do
      table.insert(newDeckIds, cardIdConversion[id] or id)
    end
    deckData["DeckIDs"] = newDeckIds

    for k, v in pairs(newDeckData) do
      deckData["CustomDeck"][k] = v
    end

    return true
  end

  return false
end

function updateOriginalItemData(originalData, replaceData)
  for _, tag in ipairs(originalData["Tags"] or {}) do
    if tag == "Replaced" then return false end
  end

  originalData["CardID"]       = replaceData["CardID"]
  originalData["CustomDeck"]   = replaceData["CustomDeck"]
  originalData["Name"]         = replaceData["Name"]
  originalData["Nickname"]     = replaceData["Nickname"] or originalData["Nickname"]
  originalData["Description"]  = replaceData["Description"] or originalData["Description"]
  originalData["CustomPDF"]    = replaceData["CustomPDF"] or originalData["CustomPDF"]
  originalData["CustomImage"]  = replaceData["CustomImage"] or originalData["CustomImage"]
  originalData["LuaScript"]    = replaceData["LuaScript"] or originalData["LuaScript"]

  originalData["Tags"]         = originalData["Tags"] or replaceData["Tags"] or {}
  table.insert(originalData["Tags"], "Replaced")

  processCard(originalData)
  return true
end

function processCard(cardData)
  local hasPlayerCardTag   = false
  local hasScenarioCardTag = false

  for _, tag in ipairs(cardData["Tags"]) do
    if tag == "PlayerCard" then
      hasPlayerCardTag = true
    elseif tag == "ScenarioCard" then
      hasScenarioCardTag = true
    end
  end

  -- has both or neither tag, can't work out back
  if hasPlayerCardTag == hasScenarioCardTag then
    log("Missing or double tag for '" .. cardData["Nickname"] .. "'.")
    return false
  end

  local newBack
  if hasPlayerCardTag then
    newBack = CARD_BACK_URL.PlayerCard
  elseif hasScenarioCardTag then
    newBack = CARD_BACK_URL.ScenarioCard
  end

  local _, customDeckData = next(cardData["CustomDeck"])
  customDeckData["BackIsHidden"] = true

  -- skip cards with decksheets as back
  if (customDeckData["NumHeight"] == 1 and customDeckData["NumWidth"] == 1) or customDeckData["UniqueBack"] == false then
    customDeckData["BackURL"] = newBack
  end
  return true
end
